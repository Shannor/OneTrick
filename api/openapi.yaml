openapi: 3.0.0
info:
  title: One Trick
  description: One Trick
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /ping:
    get:
      responses:
        '200':
          description: ping response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
  /profile:
    get:
      operationId: Profile
      parameters:
        - $ref: "#/components/parameters/X-User-ID"
        - $ref: "#/components/parameters/X-Membership-ID"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Current user info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /login:
    post:
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
      responses:
        '200':
          description: "Logging in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /refresh:
    post:
      operationId: RefreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
      responses:
        '200':
          description: "Refreshing token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /snapshots:
    post:
      parameters:
        - $ref: "#/components/parameters/X-User-ID"
        - $ref: "#/components/parameters/X-Membership-ID"
      requestBody:
        description: "Provide the character to take the snapshot of"
        required: true
        content:
          application/json:
            schema:
              required:
                - characterId
              type: object
              properties:
                characterId:
                  type: string
      operationId: CreateSnapshot
      description: "Creates a new snapshot in the system and returns a list of "
      responses:
        201:
          description: "Return the created snapshot"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharacterSnapshot"
    get:
      operationId: GetSnapshots
      security:
        - bearerAuth: []
      description: "Returns a list of snapshots in the system for a character"
      parameters:
        - $ref: "#/components/parameters/X-User-ID"
        - name: count
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: characterId
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CharacterSnapshot"

  /activities:
    get:
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int64
      operationId: GetActivities
      responses:
        200:
          description: "List of Activities that have past"
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/ActivityHistory"
  /activities/{activityId}:
    get:
      operationId: GetActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the activity.
      responses:
        '200':
          description: Array of used guns during an activity
          content:
            application/json:
              schema:
                type: object
                required:
                  - activity
                  - stats
                properties:
                  activity:
                    $ref: "#/components/schemas/ActivityHistory"
                  stats:
                    type: array
                    items:
                      $ref: "#/components/schemas/WeaponStats"

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    X-User-ID:
      name: X-User-ID
      schema:
        type: string
      in: header
      required: true
    X-Membership-ID:
      name: X-Membership-ID
      schema:
        type: string
      in: header
      required: true
  schemas:
    Profile:
      type: object
      required:
        - id
        - displayName
        - uniqueName
        - characters
      properties:
        id:
          type: string
        memberId:
          type: string
        displayName:
          type: string
        uniqueName:
          type: string
        characters:
          type: array
          items:
            $ref: "#/components/schemas/Character"
    CharacterSnapshot:
      x-go-custom-tag: firestore:"characterSnapshot"
      type: object
      required:
        - items
        - timestamp
        - characterId
      properties:
        characterId:
          type: string
          description: "Id of the character being recorded"
          x-oapi-codegen-extra-tags:
             firestore: "characterId"
        timestamp:
          type: string
          format: date-time
          description: "Timestamp that the items were equipped turning"
          x-oapi-codegen-extra-tags:
            firestore: "timestamp"
        items:
          description: "All items that we currently care about, Kinetic, Energy, Heavy and Class for now"
          type: array
          x-oapi-codegen-extra-tags:
            firestore: "items"
          items:
            $ref: "#/components/schemas/ItemSnapshot"
    ItemSnapshot:
      type: object
      required:
        - timestamp
        - details
        - instanceId
        - itemHash
        - name
      properties:
        timestamp:
          type: string
          format: date-time
          description: "Time the data was grabbed"
          x-oapi-codegen-extra-tags:
            firestore: "timestamp"
        instanceId:
          type: string
          description: "Specific instance id for the item"
          x-oapi-codegen-extra-tags:
            firestore: "instanceId"
        name:
          type: string
          description: "Name of the particular item"
          x-oapi-codegen-extra-tags:
            firestore: "name"
        itemHash:
          type: integer
          description: "Id used to find the definition of the item"
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "itemHash"
        details:
          $ref: "#/components/schemas/ItemDetails"

    ActivityHistory:
     type: object
     required:
       - referenceId
       - activityHash
       - instanceId
       - location
       - description
       - activity
     properties:
       location:
         type: string
       activity:
        type: string
       description:
         type: string
       referenceId:
         type: integer
         format: int64
       activityHash:
        type: integer
        format: int64
        description: "Hash id of the type of activity: Strike, Competitive, QuickPlay, etc. "
       instanceId:
         type: string
         description: "Id to get more details about the particular game"
       isPrivate:
         type: boolean
       mode:
         type: string
         description: "Name of the Destiny Activity Mode"

    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
    AuthResponse:
      type: object
      properties:
        id:
          type: string
        accessToken:
          type: string
          description: Access token value.
        tokenType:
          type: string
          description: Type of the access token.
        expiresIn:
          type: integer
          description: The time duration in which the access token will be expired.
        refreshToken:
          type: string
          description: Refresh token for acquiring new access token after it is expired.
        refreshExpiresIn:
          type: integer
          description: The time duration in which the refresh token will be expired.
        membershipId:
          type: string
          description: Membership identification value.
        primaryMembershipId:
          type: string
          description: Membership that is mainly used
        timestamp:
          type: string
          format: date-time
      required:
        - accessToken
        - tokenType
        - expiresIn
        - refreshToken
        - refreshExpiresIn
        - membershipId
        - primaryMembershipId
        - id
        - timestamp
    WeaponStats:
      type: object
      properties:
        referenceId:
          type: integer
          description: The hash ID of the item definition that describes the weapon.
          format: int64
        details:
          $ref: "#/components/schemas/ItemDetails"
        stats:
          $ref: "#/components/schemas/HistoricalStats"
    HistoricalStats:
      type: array
      items:
        $ref: "#/components/schemas/UniqueStatValue"
    UniqueStatValue:
      type: object
      required:
        - name
        - basic
      properties:
        name:
          type: string
        basic:
          type: object
          allOf:
            - $ref: "#/components/schemas/StatsValuePair"
          description: Basic stat value.
        pga:
          type: object
          allOf:
            - $ref: "#/components/schemas/StatsValuePair"
          description: Per game average for the statistic, if applicable
        weighted:
          type: object
          allOf:
            - $ref: "#/components/schemas/StatsValuePair"
          description: Weighted value of the stat if a weight greater than 1 has been assigned.
        activityId:
          type: integer
          description: >-
            When a stat represents the best, most, longest, fastest or
            some other personal best, the actual activity ID where that
            personal best was established is available on this property.
          format: int64
          nullable: true
    StatsValuePair:
      type: object
      properties:
        value:
          type: number
          description: Raw value of the statistic
          format: double
        displayValue:
          type: string
          description: Localized formatted version of the value.
    Perk:
      x-oapi-codegen-extra-tags:
        firestore: "perks"
      type: object
      required:
        - name
        - hash
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "name"
        description:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "description"
        hash:
          type: integer
          description: The hash ID of the perk
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "hash"
        iconPath:
          type: string
          description: "link to icon"
          x-oapi-codegen-extra-tags:
            firestore: "iconPath"
    Stats:
      x-oapi-codegen-extra-tags:
        firestore: "stats"
      type: object
      additionalProperties:
        $ref: "#/components/schemas/GunStat"
      x-dictionary-key:
        type: string
    GunStat:
      x-oapi-codegen-extra-tags:
        firestore: "gunStat"
      type: object
      required:
        - name
        - hash
        - value
        - description
      properties:
        hash:
          type: integer
          description: The hash ID of the stat.
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "hash"
        value:
          type: integer
          description: The value of the stat.
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "value"
        name:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "name"
        description:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "description"
    Socket:
      x-oapi-codegen-extra-tags:
        firestore: "socket"
      type: object
      required:
        - plugHash
        - name
        - description
      properties:
        plugHash:
          type: integer
          description: The hash ID of the socket plug.
          x-oapi-codegen-extra-tags:
            firestore: "plugHash"
        isEnabled:
          type: boolean
          description: Whether the socket plug is enabled or not.
          x-oapi-codegen-extra-tags:
            firestore: "isEnabled"
        isVisible:
          type: boolean
          description: Whether the socket plug is visible or not.
          x-oapi-codegen-extra-tags:
            firestore: "isVisible"
        name:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "name"
        description:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "description"
        icon:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "icon"
    BaseItemInfo:
      x-oapi-codegen-extra-tags:
        firestore: "baseItemInfo"
      type: object
      required:
        - name
        - itemHash
        - instanceId
        - bucketHash
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "name"
        itemHash:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "itemHash"
        instanceId:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "instanceId"
        bucketHash:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "bucketHash"
        damage:
          $ref: "#/components/schemas/DamageInfo"
    DamageInfo:
      x-oapi-codegen-extra-tags:
        firestore: "damageInfo"
      type: object
      required:
        - damageType
        - damageIcon
        - transparentIcon
        - color
      properties:
        damageType:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "damageType"
        damageIcon:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "damageIcon"
        transparentIcon:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "transparentIcon"
        color:
          $ref: "#/components/schemas/Color"
    Color:
      x-oapi-codegen-extra-tags:
        firestore: "color"
      type: object
      required:
        - red
        - green
        - blue
        - alpha
      properties:
        red:
          type: integer
          format: int
          x-oapi-codegen-extra-tags:
            firestore: "red"
        green:
          type: integer
          format: int
          x-oapi-codegen-extra-tags:
            firestore: "green"
        blue:
          type: integer
          format: int
          x-oapi-codegen-extra-tags:
            firestore: "blue"
        alpha:
          type: integer
          format: int
          x-oapi-codegen-extra-tags:
            firestore: "alpha"
    Character:
      x-oapi-codegen-extra-tags:
        firestore: "character"
      type: object
      required:
        - id
        - light
        - emblemBackgroundURL
        - emblemURL
        - currentTitle
        - race
        - class
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "id"
        light:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            firestore: "light"
        emblemURL:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "emblemURL"
        emblemBackgroundURL:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "emblemBackgroundURL"
        currentTitle:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "currentTitle"
        race:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "race"
        class:
          type: string
          x-oapi-codegen-extra-tags:
            firestore: "class"
    ItemDetails:
      type: object
      x-go-name: ItemDetails
      x-oapi-codegen-extra-tags:
        firestore: "itemDetails"
      required:
        - perks
        - stats
        - baseInfo
      properties:
        characterId:
          type: string
          description: >-
            If the item is on a character, this will return the ID of
            the character that is holding the item.
          nullable: true
          x-oapi-codegen-extra-tags:
            firestore: "characterId"
        baseInfo:
          $ref: "#/components/schemas/BaseItemInfo"
        perks:
          type: array
          items:
            $ref: "#/components/schemas/Perk"
          description: >-
            Information specifically about the perks currently active on the item.
            COMPONENT TYPE: ItemPerks
          x-oapi-codegen-extra-tags:
            firestore: "perks"
        stats:
          type: object
          allOf:
            - $ref: "#/components/schemas/Stats"
          description: >-
            Information about the computed stats of the item: power, defense, etc...
            COMPONENT TYPE: ItemStats
          x-oapi-codegen-extra-tags:
            firestore: "stats"
        sockets:
          type: array
          x-oapi-codegen-extra-tags:
            firestore: "sockets"
          items:
            $ref: "#/components/schemas/Socket"
          description: >-
            Information about the sockets of the item: which are currently active,
            what potential sockets you could have and the stats/abilities/perks
            you can gain from them.
            COMPONENT TYPE: ItemSockets
      description: >-
        The response object for retrieving an individual instanced item. None of
        these components are relevant for an item that doesn't have an
        "itemInstanceId": for those, get your information from the
        DestinyInventoryDefinition.