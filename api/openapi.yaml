openapi: 3.0.0
info:
  title: One Trick
  description: One Trick
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
  /snapshots:
    post:
      operationId: CreateSnapshot
      description: "Creates a new snapshot in the system and returns a list of "
      responses:
        201:
          description: "Return the created snapshot"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharacterSnapshot"
    get:
      operationId: GetSnapshots
      description: "Returns a list of snapshots in the system"
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CharacterSnapshot"

  /activities:
    get:
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int64
      operationId: GetActivities
      responses:
        200:
          description: "List of Activities that have past"
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/ActivityHistory"
  /activities/{activityId}:
    get:
      operationId: GetActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the activity.
      responses:
        '200':
          description: Array of used guns during an activity
          content:
            application/json:
              schema:
                type: object
                required:
                  - activity
                  - stats
                properties:
                  activity:
                    $ref: "#/components/schemas/ActivityHistory"
                  stats:
                    type: array
                    items:
                      $ref: "#/components/schemas/WeaponStats"

components:
  schemas:
    CharacterSnapshot:
      type: object
      required:
        - items
        - timestamp
      properties:
        timestamp:
          type: string
          format: date-time
          description: "Timestamp that the items were equipped turning"
        items:
          description: "All items that we currently care about, Kinetic, Energy, Heavy and Class for now"
          type: array
          items:
            $ref: "#/components/schemas/ItemSnapshot"
    ItemSnapshot:
      type: object
      required:
        - timestamp
        - details
        - instanceId
        - itemHash
        - name
      properties:
        timestamp:
          type: string
          format: date-time
          description: "Time the data was grabbed"
        instanceId:
          type: string
          description: "Specific instance id for the item"
        name:
          type: string
          description: "Name of the particular item"
        itemHash:
          type: integer
          description: "Id used to find the definition of the item"
          format: int64
        details:
          $ref: "#/components/schemas/ItemDetails"

    ActivityHistory:
     type: object
     required:
       - referenceId
       - activityHash
       - instanceId
       - location
       - description
       - activity
     properties:
       location:
         type: string
       activity:
        type: string
       description:
         type: string
       referenceId:
         type: integer
         format: int64
       activityHash:
        type: integer
        format: int64
        description: "Hash id of the type of activity: Strike, Competitive, QuickPlay, etc. "
       instanceId:
         type: string
         description: "Id to get more details about the particular game"
       isPrivate:
         type: boolean
       mode:
         type: string
         description: "Name of the Destiny Activity Mode"

    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
    WeaponStats:
      type: object
      properties:
        referenceId:
          type: integer
          description: The hash ID of the item definition that describes the weapon.
          format: int64
        details:
          $ref: "#/components/schemas/ItemDetails"
        stats:
          $ref: "#/components/schemas/HistoricalStats"
    HistoricalStats:
      type: array
      items:
        $ref: "#/components/schemas/UniqueStatValue"
    UniqueStatValue:
      type: object
      required:
        - name
        - basic
      properties:
        name:
          type: string
        basic:
          type: object
          allOf:
            - $ref: "#/components/schemas/StatsValuePair"
          description: Basic stat value.
        pga:
          type: object
          allOf:
            - $ref: "#/components/schemas/StatsValuePair"
          description: Per game average for the statistic, if applicable
        weighted:
          type: object
          allOf:
            - $ref: "#/components/schemas/StatsValuePair"
          description: Weighted value of the stat if a weight greater than 1 has been assigned.
        activityId:
          type: integer
          description: >-
            When a stat represents the best, most, longest, fastest or
            some other personal best, the actual activity ID where that
            personal best was established is available on this property.
          format: int64
          nullable: true
    StatsValuePair:
      type: object
      properties:
        value:
          type: number
          description: Raw value of the statistic
          format: double
        displayValue:
          type: string
          description: Localized formatted version of the value.
    Perk:
      type: object
      required:
        - name
        - hash
      properties:
        name:
          type: string
        description:
          type: string
        hash:
          type: integer
          description: The hash ID of the perk
          format: int64
        iconPath:
          type: string
          description: "link to icon"
    Stats:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/GunStat"
      x-dictionary-key:
        type: string
    GunStat:
      type: object
      required:
        - name
        - hash
        - value
        - description
      properties:
        hash:
          type: integer
          description: The hash ID of the stat.
          format: int64
        value:
          type: integer
          description: The value of the stat.
          format: int64
        name:
          type: string
        description:
          type: string
    Socket:
      type: object
      required:
        - plugHash
        - name
        - description
      properties:
        plugHash:
          type: integer
          description: The hash ID of the socket plug.
        isEnabled:
          type: boolean
          description: Whether the socket plug is enabled or not.
        isVisible:
          type: boolean
          description: Whether the socket plug is visible or not.
        name:
          type: string
        description:
          type: string
        icon:
          type: string
    BaseItemInfo:
      type: object
      required:
        - name
        - itemHash
        - instanceId
        - bucketHash
      properties:
        name:
          type: string
        itemHash:
          type: integer
          format: int64
        instanceId:
          type: string
        bucketHash:
          type: integer
          format: int64
        damage:
          $ref: "#/components/schemas/DamageInfo"
    DamageInfo:
      type: object
      required:
        - damageType
        - damageIcon
        - transparentIcon
        - color
      properties:
        damageType:
          type: string
        damageIcon:
          type: string
        transparentIcon:
          type: string
        color:
          $ref: "#/components/schemas/Color"
    Color:
      type: object
      required:
        - red
        - green
        - blue
        - alpha
      properties:
        red:
          type: integer
          format: int
        green:
          type: integer
          format: int
        blue:
          type: integer
          format: int
        alpha:
          type: integer
          format: int

    ItemDetails:
      type: object
      x-go-name: ItemDetails
      required:
        - perks
        - stats
        - baseInfo
      properties:
        characterId:
          type: string
          description: >-
            If the item is on a character, this will return the ID of
            the character that is holding the item.
          nullable: true
        baseInfo:
          $ref: "#/components/schemas/BaseItemInfo"
        perks:
          type: array
          items:
            $ref: "#/components/schemas/Perk"
          description: >-
            Information specifically about the perks currently active on the item.
            COMPONENT TYPE: ItemPerks
        stats:
          type: object
          allOf:
            - $ref: "#/components/schemas/Stats"
          description: >-
            Information about the computed stats of the item: power, defense, etc...
            COMPONENT TYPE: ItemStats
        sockets:
          type: array
          items:
            $ref: "#/components/schemas/Socket"
          description: >-
            Information about the sockets of the item: which are currently active,
            what potential sockets you could have and the stats/abilities/perks
            you can gain from them.
            COMPONENT TYPE: ItemSockets
      description: >-
        The response object for retrieving an individual instanced item. None of
        these components are relevant for an item that doesn't have an
        "itemInstanceId": for those, get your information from the
        DestinyInventoryDefinition.