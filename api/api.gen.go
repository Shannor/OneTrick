// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActivityMode.
const (
	AllPvP      ActivityMode = "allPvP"
	Competitive ActivityMode = "competitive"
	IronBanner  ActivityMode = "ironBanner"
	Quickplay   ActivityMode = "quickplay"
)

// Defines values for ConfidenceLevel.
const (
	HighConfidenceLevel   ConfidenceLevel = "high"
	LowConfidenceLevel    ConfidenceLevel = "low"
	MediumConfidenceLevel ConfidenceLevel = "medium"
)

// Defines values for ConfidenceSource.
const (
	SystemConfidenceSource ConfidenceSource = "system"
	UserConfidenceSource   ConfidenceSource = "user"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64  `json:"activityHash"`
	Description  string `json:"description"`

	// InstanceID Id to get more details about the particular game
	InstanceID string `json:"instanceId"`
	IsPrivate  *bool  `json:"isPrivate,omitempty"`
	Location   string `json:"location"`

	// Mode Name of the Destiny Activity Mode
	Mode        *string `json:"mode,omitempty"`
	ReferenceID int64   `json:"referenceId"`
}

// ActivityMode defines model for ActivityMode.
type ActivityMode string

// Aggregate defines model for Aggregate.
type Aggregate struct {
	ActivityID string                      `firestore:"activityId" json:"activityId"`
	CreatedAt  time.Time                   `firestore:"createdAt" json:"createdAt"`
	ID         string                      `firestore:"id" json:"id"`
	Mapping    map[string]CharacterMapping `firestore:"mapping" json:"mapping"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken Access token value.
	AccessToken string `json:"accessToken"`

	// ExpiresIn The time duration in which the access token will be expired.
	ExpiresIn int    `json:"expiresIn"`
	Id        string `json:"id"`

	// MembershipId Membership identification value.
	MembershipId string `json:"membershipId"`

	// PrimaryMembershipId Membership that is mainly used
	PrimaryMembershipId string `json:"primaryMembershipId"`

	// RefreshExpiresIn The time duration in which the refresh token will be expired.
	RefreshExpiresIn int `json:"refreshExpiresIn"`

	// RefreshToken Refresh token for acquiring new access token after it is expired.
	RefreshToken string    `json:"refreshToken"`
	Timestamp    time.Time `json:"timestamp"`

	// TokenType Type of the access token.
	TokenType string `json:"tokenType"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `firestore:"bucketHash" json:"bucketHash"`
	Damage     *DamageInfo `firestore:"damageInfo" json:"damage,omitempty"`
	InstanceId string      `firestore:"instanceId" json:"instanceId"`
	ItemHash   int64       `firestore:"itemHash" json:"itemHash"`
	Name       string      `firestore:"name" json:"name"`
}

// Character defines model for Character.
type Character struct {
	Class               string `firestore:"class" json:"class"`
	CurrentTitle        string `firestore:"currentTitle" json:"currentTitle"`
	EmblemBackgroundURL string `firestore:"emblemBackgroundURL" json:"emblemBackgroundURL"`
	EmblemURL           string `firestore:"emblemURL" json:"emblemURL"`
	Id                  string `firestore:"id" json:"id"`
	Light               int64  `firestore:"light" json:"light"`
	Race                string `firestore:"race" json:"race"`
}

// CharacterMapping defines model for CharacterMapping.
type CharacterMapping struct {
	CharacterID      string           `firestore:"characterId" json:"characterId"`
	ConfidenceLevel  ConfidenceLevel  `firestore:"confidenceLevel" json:"confidenceLevel"`
	ConfidenceSource ConfidenceSource `firestore:"confidenceSource" json:"confidenceSource"`
	CreatedAt        time.Time        `firestore:"createdAt" json:"createdAt"`
	SnapshotID       string           `firestore:"snapshotId" json:"snapshotId"`
	Snippet          SnapshotSnippet  `firestore:"snapshotSnippet" json:"snippet"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// CharacterID Id of the character being recorded
	CharacterID string `firestore:"characterId" json:"characterId"`

	// ID Id of the snapshot
	ID string `firestore:"id" json:"id"`

	// Items All items that we currently care about, Kinetic, Energy, Heavy and Class for now
	Items []ItemSnapshot `firestore:"items" json:"items"`

	// Timestamp Timestamp that the items were equipped turning
	Timestamp time.Time `firestore:"timestamp" json:"timestamp"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `firestore:"alpha" json:"alpha"`
	Blue  int `firestore:"blue" json:"blue"`
	Green int `firestore:"green" json:"green"`
	Red   int `firestore:"red" json:"red"`
}

// ConfidenceLevel defines model for ConfidenceLevel.
type ConfidenceLevel string

// ConfidenceSource defines model for ConfidenceSource.
type ConfidenceSource string

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `firestore:"color" json:"color"`
	DamageIcon      string `firestore:"damageIcon" json:"damageIcon"`
	DamageType      string `firestore:"damageType" json:"damageType"`
	TransparentIcon string `firestore:"transparentIcon" json:"transparentIcon"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `firestore:"description" json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `firestore:"hash" json:"hash"`
	Name string `firestore:"name" json:"name"`

	// Value The value of the stat.
	Value int64 `firestore:"value" json:"value"`
}

// HistoricalStats defines model for HistoricalStats.
type HistoricalStats = []UniqueStatValue

// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemDetails struct {
	BaseInfo BaseItemInfo `firestore:"baseItemInfo" json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `firestore:"characterId" json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `firestore:"perks" json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `firestore:"sockets" json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `firestore:"stats" json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails ItemDetails `firestore:"itemDetails" json:"details"`

	// InstanceID Specific instance id for the item
	InstanceID string `firestore:"instanceId" json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `firestore:"itemHash" json:"itemHash"`

	// Name Name of the particular item
	Name string `firestore:"name" json:"name"`

	// Timestamp Time the data was grabbed
	Timestamp time.Time `firestore:"timestamp" json:"timestamp"`
}

// Perk defines model for Perk.
type Perk struct {
	Description *string `firestore:"description" json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `firestore:"hash" json:"hash"`

	// IconPath link to icon
	IconPath *string `firestore:"iconPath" json:"iconPath,omitempty"`
	Name     string  `firestore:"name" json:"name"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Profile defines model for Profile.
type Profile struct {
	Characters   []Character `json:"characters"`
	DisplayName  string      `json:"displayName"`
	Id           string      `json:"id"`
	MembershipId string      `json:"membershipId"`
	UniqueName   string      `json:"uniqueName"`
}

// SnapshotSnippet defines model for SnapshotSnippet.
type SnapshotSnippet struct {
	PrimaryWeapon string `firestore:"primaryWeapon" json:"primaryWeapon"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `firestore:"description" json:"description"`
	Icon        *string `firestore:"icon" json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `firestore:"isEnabled" json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible *bool  `firestore:"isVisible" json:"isVisible,omitempty"`
	Name      string `firestore:"name" json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `firestore:"plugHash" json:"plugHash"`
}

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `json:"basic"`
	Name  string         `json:"name"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `json:"weighted,omitempty"`
}

// WeaponStats defines model for WeaponStats.
type WeaponStats struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails *ItemDetails `firestore:"itemDetails" json:"details,omitempty"`

	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *int64           `json:"referenceId,omitempty"`
	Stats       *HistoricalStats `json:"stats,omitempty"`
}

// XMembershipID defines model for X-Membership-ID.
type XMembershipID = string

// XUserID defines model for X-User-ID.
type XUserID = string

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count         int64         `form:"count" json:"count"`
	Page          int64         `form:"page" json:"page"`
	CharacterId   string        `form:"characterId" json:"characterId"`
	Mode          *ActivityMode `form:"mode,omitempty" json:"mode,omitempty"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetActivityParams defines parameters for GetActivity.
type GetActivityParams struct {
	CharacterId   string        `form:"characterId" json:"characterId"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Code string `json:"code"`
}

// ProfileParams defines parameters for Profile.
type ProfileParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	Code string `json:"code"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count       int64   `form:"count" json:"count"`
	Page        int64   `form:"page" json:"page"`
	CharacterId string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// CreateSnapshotJSONBody defines parameters for CreateSnapshot.
type CreateSnapshotJSONBody struct {
	CharacterId string `json:"characterId"`
}

// CreateSnapshotParams defines parameters for CreateSnapshot.
type CreateSnapshotParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetSnapshotParams defines parameters for GetSnapshot.
type GetSnapshotParams struct {
	CharacterId string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody CreateSnapshotJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityId string, params GetActivityParams)

	// (POST /login)
	Login(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /profile)
	Profile(c *gin.Context, params ProfileParams)

	// (POST /refresh)
	RefreshToken(c *gin.Context)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context, params CreateSnapshotParams)

	// (GET /snapshots/{snapshotId})
	GetSnapshot(c *gin.Context, snapshotId string, params GetSnapshotParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", c.Request.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mode: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivityParams

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityId, params)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// Profile operation middleware
func (siw *ServerInterfaceWrapper) Profile(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Profile(c, params)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSnapshotParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c, params)
}

// GetSnapshot operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "snapshotId" -------------
	var snapshotId string

	err = runtime.BindStyledParameterWithOptions("simple", "snapshotId", c.Param("snapshotId"), &snapshotId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter snapshotId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotParams

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshot(c, snapshotId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/profile", wrapper.Profile)
	router.POST(options.BaseURL+"/refresh", wrapper.RefreshToken)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
	router.GET(options.BaseURL+"/snapshots/:snapshotId", wrapper.GetSnapshot)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []ActivityHistory

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityId string `json:"activityId"`
	Params     GetActivityParams
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity  ActivityHistory `json:"activity"`
	Aggregate Aggregate       `json:"aggregate"`
	Stats     []WeaponStats   `json:"stats"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse AuthResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileRequestObject struct {
	Params ProfileParams
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse AuthResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
	Params CreateSnapshotParams
	Body   *CreateSnapshotJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotRequestObject struct {
	SnapshotId string `json:"snapshotId"`
	Params     GetSnapshotParams
}

type GetSnapshotResponseObject interface {
	VisitGetSnapshotResponse(w http.ResponseWriter) error
}

type GetSnapshot200JSONResponse CharacterSnapshot

func (response GetSnapshot200JSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (GET /profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (POST /refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)

	// (GET /snapshots/{snapshotId})
	GetSnapshot(ctx context.Context, request GetSnapshotRequestObject) (GetSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityId string, params GetActivityParams) {
	var request GetActivityRequestObject

	request.ActivityId = activityId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Profile operation middleware
func (sh *strictHandler) Profile(ctx *gin.Context, params ProfileParams) {
	var request ProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx, request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		if err := validResponse.VisitProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context, params CreateSnapshotParams) {
	var request CreateSnapshotRequestObject

	request.Params = params

	var body CreateSnapshotJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshot operation middleware
func (sh *strictHandler) GetSnapshot(ctx *gin.Context, snapshotId string, params GetSnapshotParams) {
	var request GetSnapshotRequestObject

	request.SnapshotId = snapshotId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshot(ctx, request.(GetSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotResponseObject); ok {
		if err := validResponse.VisitGetSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
