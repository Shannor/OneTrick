// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64  `json:"activityHash"`
	Description  string `json:"description"`

	// InstanceId Id to get more details about the particular game
	InstanceId string `json:"instanceId"`
	IsPrivate  *bool  `json:"isPrivate,omitempty"`
	Location   string `json:"location"`

	// Mode Name of the Destiny Activity Mode
	Mode        *string `json:"mode,omitempty"`
	ReferenceId int64   `json:"referenceId"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `json:"bucketHash"`
	Damage     *DamageInfo `json:"damage,omitempty"`
	InstanceId string      `json:"instanceId"`
	ItemHash   int64       `json:"itemHash"`
	Name       string      `json:"name"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// Items All items that we currently care about, Kinetic, Energy, Heavy and Class for now
	Items []ItemSnapshot `json:"items"`

	// Timestamp Timestamp that the items were equipped turning
	Timestamp time.Time `json:"timestamp"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `json:"alpha"`
	Blue  int `json:"blue"`
	Green int `json:"green"`
	Red   int `json:"red"`
}

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `json:"color"`
	DamageIcon      string `json:"damageIcon"`
	DamageType      string `json:"damageType"`
	TransparentIcon string `json:"transparentIcon"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `json:"hash"`
	Name string `json:"name"`

	// Value The value of the stat.
	Value int64 `json:"value"`
}

// HistoricalStats defines model for HistoricalStats.
type HistoricalStats = []UniqueStatValue

// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemDetails struct {
	BaseInfo BaseItemInfo `json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails ItemDetails `json:"details"`

	// InstanceId Specific instance id for the item
	InstanceId string `json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `json:"itemHash"`

	// Name Name of the particular item
	Name string `json:"name"`

	// Timestamp Time the data was grabbed
	Timestamp time.Time `json:"timestamp"`
}

// Perk defines model for Perk.
type Perk struct {
	Description *string `json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `json:"hash"`

	// IconPath link to icon
	IconPath *string `json:"iconPath,omitempty"`
	Name     string  `json:"name"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `json:"description"`
	Icon        *string `json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible *bool  `json:"isVisible,omitempty"`
	Name      string `json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `json:"plugHash"`
}

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `json:"basic"`
	Name  string         `json:"name"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `json:"weighted,omitempty"`
}

// WeaponStats defines model for WeaponStats.
type WeaponStats struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails *ItemDetails `json:"details,omitempty"`

	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *int64           `json:"referenceId,omitempty"`
	Stats       *HistoricalStats `json:"stats,omitempty"`
}

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityId string)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityId)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []ActivityHistory

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityId string `json:"activityId"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity ActivityHistory `json:"activity"`
	Stats    []WeaponStats   `json:"stats"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityId string) {
	var request GetActivityRequestObject

	request.ActivityId = activityId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context) {
	var request CreateSnapshotRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
