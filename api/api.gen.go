// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64  `json:"activityHash"`
	Description  string `json:"description"`

	// InstanceId Id to get more details about the particular game
	InstanceId string `json:"instanceId"`
	IsPrivate  *bool  `json:"isPrivate,omitempty"`
	Location   string `json:"location"`

	// Mode Name of the Destiny Activity Mode
	Mode        *string `json:"mode,omitempty"`
	ReferenceId int64   `json:"referenceId"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken Access token value.
	AccessToken string `json:"accessToken"`

	// ExpiresIn The time duration in which the access token will be expired.
	ExpiresIn int `json:"expiresIn"`

	// MembershipId Membership identification value.
	MembershipId string `json:"membershipId"`

	// RefreshExpiresIn The time duration in which the refresh token will be expired.
	RefreshExpiresIn int `json:"refreshExpiresIn"`

	// RefreshToken Refresh token for acquiring new access token after it is expired.
	RefreshToken string `json:"refreshToken"`

	// TokenType Type of the access token.
	TokenType string `json:"tokenType"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `json:"bucketHash"`
	Damage     *DamageInfo `json:"damage,omitempty"`
	InstanceId string      `json:"instanceId"`
	ItemHash   int64       `json:"itemHash"`
	Name       string      `json:"name"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// Items All items that we currently care about, Kinetic, Energy, Heavy and Class for now
	Items []ItemSnapshot `json:"items"`

	// Timestamp Timestamp that the items were equipped turning
	Timestamp time.Time `json:"timestamp"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `json:"alpha"`
	Blue  int `json:"blue"`
	Green int `json:"green"`
	Red   int `json:"red"`
}

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `json:"color"`
	DamageIcon      string `json:"damageIcon"`
	DamageType      string `json:"damageType"`
	TransparentIcon string `json:"transparentIcon"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `json:"hash"`
	Name string `json:"name"`

	// Value The value of the stat.
	Value int64 `json:"value"`
}

// HistoricalStats defines model for HistoricalStats.
type HistoricalStats = []UniqueStatValue

// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemDetails struct {
	BaseInfo BaseItemInfo `json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails ItemDetails `json:"details"`

	// InstanceId Specific instance id for the item
	InstanceId string `json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `json:"itemHash"`

	// Name Name of the particular item
	Name string `json:"name"`

	// Timestamp Time the data was grabbed
	Timestamp time.Time `json:"timestamp"`
}

// Perk defines model for Perk.
type Perk struct {
	Description *string `json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `json:"hash"`

	// IconPath link to icon
	IconPath *string `json:"iconPath,omitempty"`
	Name     string  `json:"name"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Profile defines model for Profile.
type Profile struct {
	DisplayName string `json:"displayName"`
	Id          string `json:"id"`
	UniqueName  string `json:"uniqueName"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `json:"description"`
	Icon        *string `json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible *bool  `json:"isVisible,omitempty"`
	Name      string `json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `json:"plugHash"`
}

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `json:"basic"`
	Name  string         `json:"name"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `json:"weighted,omitempty"`
}

// WeaponStats defines model for WeaponStats.
type WeaponStats struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails *ItemDetails `json:"details,omitempty"`

	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *int64           `json:"referenceId,omitempty"`
	Stats       *HistoricalStats `json:"stats,omitempty"`
}

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Code string `json:"code"`
}

// ProfileParams defines parameters for Profile.
type ProfileParams struct {
	XMembershipID string `json:"X-Membership-ID"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	Code string `json:"code"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityId string)

	// (POST /login)
	Login(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /profile)
	Profile(c *gin.Context, params ProfileParams)

	// (POST /refresh)
	RefreshToken(c *gin.Context)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityId)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// Profile operation middleware
func (siw *ServerInterfaceWrapper) Profile(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Profile(c, params)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/profile", wrapper.Profile)
	router.POST(options.BaseURL+"/refresh", wrapper.RefreshToken)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []ActivityHistory

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityId string `json:"activityId"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity ActivityHistory `json:"activity"`
	Stats    []WeaponStats   `json:"stats"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse AuthResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileRequestObject struct {
	Params ProfileParams
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse AuthResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (GET /profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (POST /refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityId string) {
	var request GetActivityRequestObject

	request.ActivityId = activityId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Profile operation middleware
func (sh *strictHandler) Profile(ctx *gin.Context, params ProfileParams) {
	var request ProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx, request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		if err := validResponse.VisitProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context) {
	var request CreateSnapshotRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
