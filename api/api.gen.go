// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActivityMode.
const (
	AllPvP      ActivityMode = "allPvP"
	Competitive ActivityMode = "competitive"
	IronBanner  ActivityMode = "ironBanner"
	Quickplay   ActivityMode = "quickplay"
)

// Defines values for ConfidenceLevel.
const (
	HighConfidenceLevel     ConfidenceLevel = "high"
	LowConfidenceLevel      ConfidenceLevel = "low"
	MediumConfidenceLevel   ConfidenceLevel = "medium"
	NoMatchConfidenceLevel  ConfidenceLevel = "noMatch"
	NotFoundConfidenceLevel ConfidenceLevel = "notFound"
)

// Defines values for ConfidenceSource.
const (
	SystemConfidenceSource ConfidenceSource = "system"
	UserConfidenceSource   ConfidenceSource = "user"
)

// Defines values for InternalError.
const (
	ErrDestinyServerDown  InternalError = "DestinyServerDown"
	ErrInternalSystemDown InternalError = "InternalSystemDown"
	ErrUnknownError       InternalError = "UnknownError"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64 `json:"activityHash"`

	// ActivityIcon URL to the icon for the type of activity, IB, Crucible, etc.
	ActivityIcon string `json:"activityIcon"`
	Description  string `json:"description"`

	// ImageURL URL for the image of the destination activity
	ImageURL string `json:"imageUrl"`

	// InstanceID Id to get more details about the particular game
	InstanceID string `json:"instanceId"`
	IsPrivate  *bool  `json:"isPrivate,omitempty"`
	Location   string `json:"location"`

	// Mode Name of the Destiny Activity Mode
	Mode           *string         `json:"mode,omitempty"`
	PersonalValues *ActivityValues `json:"personalValues,omitempty"`
	ReferenceID    int64           `json:"referenceId"`
}

// ActivityMode defines model for ActivityMode.
type ActivityMode string

// ActivityValues defines model for ActivityValues.
type ActivityValues struct {
	Assists    *StatsValuePair `json:"assists,omitempty"`
	Deaths     *StatsValuePair `json:"deaths,omitempty"`
	FireTeamId *StatsValuePair `json:"fireTeamId,omitempty"`
	Kd         *StatsValuePair `json:"kd,omitempty"`
	Kda        *StatsValuePair `json:"kda,omitempty"`
	Kills      *StatsValuePair `json:"kills,omitempty"`
	Standing   *StatsValuePair `json:"standing,omitempty"`
	Team       *StatsValuePair `json:"team,omitempty"`
	TimePlayed *StatsValuePair `json:"timePlayed,omitempty"`
}

// Aggregate defines model for Aggregate.
type Aggregate struct {
	ActivityID string                      `firestore:"activityId" json:"activityId"`
	CreatedAt  time.Time                   `firestore:"createdAt" json:"createdAt"`
	ID         string                      `firestore:"id" json:"id"`
	Mapping    map[string]CharacterMapping `firestore:"mapping" json:"mapping"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken Access token value.
	AccessToken string `json:"accessToken"`

	// ExpiresIn The time duration in which the access token will be expired.
	ExpiresIn int    `json:"expiresIn"`
	Id        string `json:"id"`

	// MembershipId Membership identification value.
	MembershipId string `json:"membershipId"`

	// PrimaryMembershipId Membership that is mainly used
	PrimaryMembershipId string `json:"primaryMembershipId"`

	// RefreshExpiresIn The time duration in which the refresh token will be expired.
	RefreshExpiresIn int `json:"refreshExpiresIn"`

	// RefreshToken Refresh token for acquiring new access token after it is expired.
	RefreshToken string    `json:"refreshToken"`
	Timestamp    time.Time `json:"timestamp"`

	// TokenType Type of the access token.
	TokenType string `json:"tokenType"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `firestore:"bucketHash" json:"bucketHash"`
	Damage     *DamageInfo `firestore:"damageInfo" json:"damage,omitempty"`
	InstanceId string      `firestore:"instanceId" json:"instanceId"`
	ItemHash   int64       `firestore:"itemHash" json:"itemHash"`
	Name       string      `firestore:"name" json:"name"`
}

// Character defines model for Character.
type Character struct {
	Class               string `firestore:"class" json:"class"`
	CurrentTitle        string `firestore:"currentTitle" json:"currentTitle"`
	EmblemBackgroundURL string `firestore:"emblemBackgroundURL" json:"emblemBackgroundURL"`
	EmblemURL           string `firestore:"emblemURL" json:"emblemURL"`
	Id                  string `firestore:"id" json:"id"`
	Light               int64  `firestore:"light" json:"light"`
	Race                string `firestore:"race" json:"race"`
}

// CharacterMapping defines model for CharacterMapping.
type CharacterMapping struct {
	CharacterID      string           `firestore:"characterId" json:"characterId"`
	ConfidenceLevel  ConfidenceLevel  `firestore:"confidenceLevel" json:"confidenceLevel"`
	ConfidenceSource ConfidenceSource `firestore:"confidenceSource" json:"confidenceSource"`
	CreatedAt        time.Time        `firestore:"createdAt" json:"createdAt"`
	SnapshotData     *SnapshotData    `firestore:"snapshotData" json:"snapshotData,omitempty"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// CharacterID Id of the character being recorded
	CharacterID string `firestore:"characterId" json:"characterId"`

	// Hash Hash of all the items to give us a unique key
	Hash string `firestore:"hash" json:"hash"`

	// ID Id of the snapshot
	ID string `firestore:"id" json:"id"`

	// IsOriginal Will be default false for almost all Snapshots. Will only be set for the first snapshot entry with the selected items.
	IsOriginal bool `firestore:"isOriginal" json:"isOriginal"`

	// Loadout All buckets that we currently care about, Kinetic, Energy, Heavy and Class for now. Each will be a key in the items.
	Loadout Loadout `firestore:"loadout" json:"loadout"`

	// Name Name of the snapshot, will probably be generated by default by the system but can be changed by a user
	Name string `firestore:"name" json:"name"`

	// ParentID Optional ID that will link to the first ever snapshot
	// that has the same hash. If the parent ID is provided
	// then the snapshot data will be empty. Search by the hash
	// to find the original data.
	ParentID *string `firestore:"parentId" json:"parentId,omitempty"`

	// Timestamp Timestamp for when the snapshot was taken
	Timestamp time.Time `firestore:"timestamp" json:"timestamp"`

	// UserID Id of the user it belongs to
	UserID string `firestore:"userId" json:"userId"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `firestore:"alpha" json:"alpha"`
	Blue  int `firestore:"blue" json:"blue"`
	Green int `firestore:"green" json:"green"`
	Red   int `firestore:"red" json:"red"`
}

// ConfidenceLevel defines model for ConfidenceLevel.
type ConfidenceLevel string

// ConfidenceSource defines model for ConfidenceSource.
type ConfidenceSource string

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `firestore:"color" json:"color"`
	DamageIcon      string `firestore:"damageIcon" json:"damageIcon"`
	DamageType      string `firestore:"damageType" json:"damageType"`
	TransparentIcon string `firestore:"transparentIcon" json:"transparentIcon"`
}

// DetailActivity defines model for DetailActivity.
type DetailActivity struct {
	Activity  ActivityHistory `json:"activity"`
	Aggregate *Aggregate      `json:"aggregate,omitempty"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `firestore:"description" json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `firestore:"hash" json:"hash"`
	Name string `firestore:"name" json:"name"`

	// Value The value of the stat.
	Value int64 `firestore:"value" json:"value"`
}

// HistoricalStats defines model for HistoricalStats.
type HistoricalStats = []UniqueStatValue

// InternalError defines model for InternalError.
type InternalError string

// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemDetails struct {
	BaseInfo BaseItemInfo `firestore:"baseItemInfo" json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `firestore:"characterId" json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `firestore:"perks" json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `firestore:"sockets" json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `firestore:"stats" json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// BucketHash Hash of which bucket this item can be equipped in
	BucketHash *int64 `firestore:"bucketHash" json:"bucketHash,omitempty"`

	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails ItemDetails `firestore:"itemDetails" json:"details"`

	// InstanceID Specific instance id for the item
	InstanceID string `firestore:"instanceId" json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `firestore:"itemHash" json:"itemHash"`

	// Name Name of the particular item
	Name string `firestore:"name" json:"name"`
}

// Loadout All buckets that we currently care about, Kinetic, Energy, Heavy and Class for now. Each will be a key in the items.
type Loadout map[string]ItemSnapshot

// Perk defines model for Perk.
type Perk struct {
	Description *string `firestore:"description" json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `firestore:"hash" json:"hash"`

	// IconPath link to icon
	IconPath *string `firestore:"iconPath" json:"iconPath,omitempty"`
	Name     string  `firestore:"name" json:"name"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Profile defines model for Profile.
type Profile struct {
	Characters   []Character `json:"characters"`
	DisplayName  string      `json:"displayName"`
	Id           string      `json:"id"`
	MembershipId string      `json:"membershipId"`
	UniqueName   string      `json:"uniqueName"`
}

// Session defines model for Session.
type Session struct {
	CharacterID string     `firestore:"characterId" json:"characterId"`
	CompletedAt *time.Time `firestore:"completedAt" json:"completedAt,omitempty"`
	ID          string     `firestore:"id" json:"id"`
	Name        *string    `firestore:"name" json:"name,omitempty"`
	StartedAt   time.Time  `firestore:"startedAt" json:"startedAt"`
	UserID      string     `firestore:"userId" json:"userId"`
}

// SnapshotData defines model for SnapshotData.
type SnapshotData struct {
	SnapshotID string          `firestore:"snapshotId" json:"snapshotId"`
	Snippet    SnapshotSnippet `firestore:"snapshotSnippet" json:"snippet"`
}

// SnapshotSnippet defines model for SnapshotSnippet.
type SnapshotSnippet struct {
	PrimaryWeapon string `firestore:"primaryWeapon" json:"primaryWeapon"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `firestore:"description" json:"description"`
	Icon        *string `firestore:"icon" json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `firestore:"isEnabled" json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible *bool  `firestore:"isVisible" json:"isVisible,omitempty"`
	Name      string `firestore:"name" json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `firestore:"plugHash" json:"plugHash"`
}

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// Team defines model for Team.
type Team struct {
	ID       string  `json:"id"`
	Score    string  `json:"score"`
	Standing string  `json:"standing"`
	TeamName *string `json:"teamName,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `json:"basic"`
	Name  string         `json:"name"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `json:"weighted,omitempty"`
}

// WeaponStats defines model for WeaponStats.
type WeaponStats struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails *ItemDetails `firestore:"itemDetails" json:"details,omitempty"`

	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *int64           `json:"referenceId,omitempty"`
	Stats       *HistoricalStats `json:"stats,omitempty"`
}

// XMembershipID defines model for X-Membership-ID.
type XMembershipID = string

// XUserID defines model for X-User-ID.
type XUserID = string

// SessionCheckInJSONBody defines parameters for SessionCheckIn.
type SessionCheckInJSONBody struct {
	SessionID string `json:"sessionId"`
}

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count         int64         `form:"count" json:"count"`
	Page          int64         `form:"page" json:"page"`
	CharacterID   string        `form:"characterId" json:"characterId"`
	Mode          *ActivityMode `form:"mode,omitempty" json:"mode,omitempty"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetActivityParams defines parameters for GetActivity.
type GetActivityParams struct {
	CharacterId   string        `form:"characterId" json:"characterId"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Code string `json:"code"`
}

// ProfileParams defines parameters for Profile.
type ProfileParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	Code string `json:"code"`
}

// GetSessionsParams defines parameters for GetSessions.
type GetSessionsParams struct {
	Count         int64         `form:"count" json:"count"`
	Page          int64         `form:"page" json:"page"`
	CharacterID   string        `form:"characterId" json:"characterId"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// StartSessionJSONBody defines parameters for StartSession.
type StartSessionJSONBody struct {
	CharacterID string `json:"characterId"`
}

// StartSessionParams defines parameters for StartSession.
type StartSessionParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// UpdateSessionJSONBody defines parameters for UpdateSession.
type UpdateSessionJSONBody struct {
	CharacterID string  `json:"characterId"`
	CompletedAt *string `json:"completedAt,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateSessionParams defines parameters for UpdateSession.
type UpdateSessionParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetSessionAggregatesParams defines parameters for GetSessionAggregates.
type GetSessionAggregatesParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count       int64   `form:"count" json:"count"`
	Page        int64   `form:"page" json:"page"`
	CharacterId string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// CreateSnapshotJSONBody defines parameters for CreateSnapshot.
type CreateSnapshotJSONBody struct {
	CharacterId string `json:"characterId"`
}

// CreateSnapshotParams defines parameters for CreateSnapshot.
type CreateSnapshotParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetSnapshotParams defines parameters for GetSnapshot.
type GetSnapshotParams struct {
	CharacterId string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// SessionCheckInJSONRequestBody defines body for SessionCheckIn for application/json ContentType.
type SessionCheckInJSONRequestBody SessionCheckInJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// StartSessionJSONRequestBody defines body for StartSession for application/json ContentType.
type StartSessionJSONRequestBody StartSessionJSONBody

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody UpdateSessionJSONBody

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody CreateSnapshotJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /actions/session-checkin)
	SessionCheckIn(c *gin.Context)

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityId string, params GetActivityParams)

	// (POST /login)
	Login(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /profile)
	Profile(c *gin.Context, params ProfileParams)

	// (POST /refresh)
	RefreshToken(c *gin.Context)

	// (GET /sessions)
	GetSessions(c *gin.Context, params GetSessionsParams)

	// (POST /sessions)
	StartSession(c *gin.Context, params StartSessionParams)

	// (PUT /sessions/{sessionId})
	UpdateSession(c *gin.Context, sessionId string, params UpdateSessionParams)

	// (GET /sessions/{sessionId}/aggregates)
	GetSessionAggregates(c *gin.Context, sessionId string, params GetSessionAggregatesParams)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context, params CreateSnapshotParams)

	// (GET /snapshots/{snapshotId})
	GetSnapshot(c *gin.Context, snapshotId string, params GetSnapshotParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SessionCheckIn operation middleware
func (siw *ServerInterfaceWrapper) SessionCheckIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SessionCheckIn(c)
}

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", c.Request.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mode: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivityParams

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityId, params)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// Profile operation middleware
func (siw *ServerInterfaceWrapper) Profile(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Profile(c, params)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessions(c, params)
}

// StartSession operation middleware
func (siw *ServerInterfaceWrapper) StartSession(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StartSessionParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartSession(c, params)
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateSessionParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSession(c, sessionId, params)
}

// GetSessionAggregates operation middleware
func (siw *ServerInterfaceWrapper) GetSessionAggregates(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionAggregatesParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessionAggregates(c, sessionId, params)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSnapshotParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c, params)
}

// GetSnapshot operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "snapshotId" -------------
	var snapshotId string

	err = runtime.BindStyledParameterWithOptions("simple", "snapshotId", c.Param("snapshotId"), &snapshotId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter snapshotId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotParams

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshot(c, snapshotId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/actions/session-checkin", wrapper.SessionCheckIn)
	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/profile", wrapper.Profile)
	router.POST(options.BaseURL+"/refresh", wrapper.RefreshToken)
	router.GET(options.BaseURL+"/sessions", wrapper.GetSessions)
	router.POST(options.BaseURL+"/sessions", wrapper.StartSession)
	router.PUT(options.BaseURL+"/sessions/:sessionId", wrapper.UpdateSession)
	router.GET(options.BaseURL+"/sessions/:sessionId/aggregates", wrapper.GetSessionAggregates)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
	router.GET(options.BaseURL+"/snapshots/:snapshotId", wrapper.GetSnapshot)
}

type SessionCheckInRequestObject struct {
	Body *SessionCheckInJSONRequestBody
}

type SessionCheckInResponseObject interface {
	VisitSessionCheckInResponse(w http.ResponseWriter) error
}

type SessionCheckIn200JSONResponse bool

func (response SessionCheckIn200JSONResponse) VisitSessionCheckInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []DetailActivity

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityId string `json:"activityId"`
	Params     GetActivityParams
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity       ActivityHistory `json:"activity"`
	Aggregate      Aggregate       `json:"aggregate"`
	CharacterStats *[]WeaponStats  `json:"characterStats,omitempty"`
	Teams          []Team          `json:"teams"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse AuthResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileRequestObject struct {
	Params ProfileParams
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Profile503JSONResponse struct {
	// Message User friendly description of the error
	Message string        `json:"message"`
	Status  InternalError `json:"status"`
}

func (response Profile503JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse AuthResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionsRequestObject struct {
	Params GetSessionsParams
}

type GetSessionsResponseObject interface {
	VisitGetSessionsResponse(w http.ResponseWriter) error
}

type GetSessions200JSONResponse []Session

func (response GetSessions200JSONResponse) VisitGetSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StartSessionRequestObject struct {
	Params StartSessionParams
	Body   *StartSessionJSONRequestBody
}

type StartSessionResponseObject interface {
	VisitStartSessionResponse(w http.ResponseWriter) error
}

type StartSession201JSONResponse Session

func (response StartSession201JSONResponse) VisitStartSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionRequestObject struct {
	SessionId string `json:"sessionId"`
	Params    UpdateSessionParams
	Body      *UpdateSessionJSONRequestBody
}

type UpdateSessionResponseObject interface {
	VisitUpdateSessionResponse(w http.ResponseWriter) error
}

type UpdateSession201JSONResponse Session

func (response UpdateSession201JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionAggregatesRequestObject struct {
	SessionId string `json:"sessionId"`
	Params    GetSessionAggregatesParams
}

type GetSessionAggregatesResponseObject interface {
	VisitGetSessionAggregatesResponse(w http.ResponseWriter) error
}

type GetSessionAggregates200JSONResponse []Aggregate

func (response GetSessionAggregates200JSONResponse) VisitGetSessionAggregatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
	Params CreateSnapshotParams
	Body   *CreateSnapshotJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotRequestObject struct {
	SnapshotId string `json:"snapshotId"`
	Params     GetSnapshotParams
}

type GetSnapshotResponseObject interface {
	VisitGetSnapshotResponse(w http.ResponseWriter) error
}

type GetSnapshot200JSONResponse CharacterSnapshot

func (response GetSnapshot200JSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /actions/session-checkin)
	SessionCheckIn(ctx context.Context, request SessionCheckInRequestObject) (SessionCheckInResponseObject, error)

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (GET /profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (POST /refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (GET /sessions)
	GetSessions(ctx context.Context, request GetSessionsRequestObject) (GetSessionsResponseObject, error)

	// (POST /sessions)
	StartSession(ctx context.Context, request StartSessionRequestObject) (StartSessionResponseObject, error)

	// (PUT /sessions/{sessionId})
	UpdateSession(ctx context.Context, request UpdateSessionRequestObject) (UpdateSessionResponseObject, error)

	// (GET /sessions/{sessionId}/aggregates)
	GetSessionAggregates(ctx context.Context, request GetSessionAggregatesRequestObject) (GetSessionAggregatesResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)

	// (GET /snapshots/{snapshotId})
	GetSnapshot(ctx context.Context, request GetSnapshotRequestObject) (GetSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SessionCheckIn operation middleware
func (sh *strictHandler) SessionCheckIn(ctx *gin.Context) {
	var request SessionCheckInRequestObject

	var body SessionCheckInJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionCheckIn(ctx, request.(SessionCheckInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionCheckIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SessionCheckInResponseObject); ok {
		if err := validResponse.VisitSessionCheckInResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityId string, params GetActivityParams) {
	var request GetActivityRequestObject

	request.ActivityId = activityId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Profile operation middleware
func (sh *strictHandler) Profile(ctx *gin.Context, params ProfileParams) {
	var request ProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx, request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		if err := validResponse.VisitProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessions operation middleware
func (sh *strictHandler) GetSessions(ctx *gin.Context, params GetSessionsParams) {
	var request GetSessionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessions(ctx, request.(GetSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionsResponseObject); ok {
		if err := validResponse.VisitGetSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartSession operation middleware
func (sh *strictHandler) StartSession(ctx *gin.Context, params StartSessionParams) {
	var request StartSessionRequestObject

	request.Params = params

	var body StartSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartSession(ctx, request.(StartSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(StartSessionResponseObject); ok {
		if err := validResponse.VisitStartSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSession operation middleware
func (sh *strictHandler) UpdateSession(ctx *gin.Context, sessionId string, params UpdateSessionParams) {
	var request UpdateSessionRequestObject

	request.SessionId = sessionId
	request.Params = params

	var body UpdateSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSession(ctx, request.(UpdateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSessionResponseObject); ok {
		if err := validResponse.VisitUpdateSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessionAggregates operation middleware
func (sh *strictHandler) GetSessionAggregates(ctx *gin.Context, sessionId string, params GetSessionAggregatesParams) {
	var request GetSessionAggregatesRequestObject

	request.SessionId = sessionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionAggregates(ctx, request.(GetSessionAggregatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionAggregates")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionAggregatesResponseObject); ok {
		if err := validResponse.VisitGetSessionAggregatesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context, params CreateSnapshotParams) {
	var request CreateSnapshotRequestObject

	request.Params = params

	var body CreateSnapshotJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshot operation middleware
func (sh *strictHandler) GetSnapshot(ctx *gin.Context, snapshotId string, params GetSnapshotParams) {
	var request GetSnapshotRequestObject

	request.SnapshotId = snapshotId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshot(ctx, request.(GetSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotResponseObject); ok {
		if err := validResponse.VisitGetSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
