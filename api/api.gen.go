// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActivityMode.
const (
	AllPvP      ActivityMode = "allPvP"
	Competitive ActivityMode = "competitive"
	IronBanner  ActivityMode = "ironBanner"
	Quickplay   ActivityMode = "quickplay"
)

// Defines values for ConfidenceLevel.
const (
	HighConfidenceLevel     ConfidenceLevel = "high"
	LowConfidenceLevel      ConfidenceLevel = "low"
	MediumConfidenceLevel   ConfidenceLevel = "medium"
	NoMatchConfidenceLevel  ConfidenceLevel = "noMatch"
	NotFoundConfidenceLevel ConfidenceLevel = "notFound"
)

// Defines values for ConfidenceSource.
const (
	SystemConfidenceSource ConfidenceSource = "system"
	UserConfidenceSource   ConfidenceSource = "user"
)

// Defines values for InternalError.
const (
	ErrDestinyServerDown  InternalError = "DestinyServerDown"
	ErrInternalSystemDown InternalError = "InternalSystemDown"
	ErrUnknownError       InternalError = "UnknownError"
)

// Defines values for SessionStatus.
const (
	SessionComplete SessionStatus = "complete"
	SessionPending  SessionStatus = "pending"
)

// Defines values for SourceSystem.
const (
	SystemPlayStation SourceSystem = "playstation"
	SystemStadia      SourceSystem = "stadia"
	SystemSteam       SourceSystem = "steam"
	SystemUnknown     SourceSystem = "unknown"
	SystemXbox        SourceSystem = "xbox"
)

// Defines values for GetPublicSessionsParamsStatus.
const (
	GetPublicSessionsParamsStatusSessionRequestComplete GetPublicSessionsParamsStatus = "complete"
	GetPublicSessionsParamsStatusSessionRequestPending  GetPublicSessionsParamsStatus = "pending"
)

// Defines values for GetSessionsParamsStatus.
const (
	GetSessionsParamsStatusSessionRequestComplete GetSessionsParamsStatus = "complete"
	GetSessionsParamsStatusSessionRequestPending  GetSessionsParamsStatus = "pending"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `firestore:"activity" json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64 `firestore:"activityHash" json:"activityHash"`

	// ActivityIcon URL to the icon for the type of activity, IB, Crucible, etc.
	ActivityIcon string `firestore:"activityIcon" json:"activityIcon"`
	Description  string `firestore:"description" json:"description"`

	// ImageURL URL for the image of the destination activity
	ImageURL string `firestore:"imageUrl" json:"imageUrl"`

	// InstanceID Id to get more details about the particular game
	InstanceID string `firestore:"instanceId" json:"instanceId"`
	IsPrivate  *bool  `firestore:"isPrivate" json:"isPrivate,omitempty"`
	Location   string `firestore:"location" json:"location"`

	// Mode Name
	Mode   *string   `firestore:"mode" json:"mode,omitempty"`
	Period time.Time `firestore:"period" json:"period"`

	// PersonalValues All Player Stats from a match that we currently care about
	PersonalValues *PlayerStats `firestore:"playerStats" json:"personalValues,omitempty"`
	ReferenceID    int64        `firestore:"referenceId" json:"referenceId"`
}

// ActivityMode defines model for ActivityMode.
type ActivityMode string

// Aggregate defines model for Aggregate.
type Aggregate struct {
	ActivityDetails ActivityHistory                `firestore:"activityHistory" json:"activityDetails"`
	ActivityID      string                         `firestore:"activityId" json:"activityId"`
	CreatedAt       time.Time                      `firestore:"createdAt" json:"createdAt"`
	ID              string                         `firestore:"id" json:"id"`
	Performance     map[string]InstancePerformance `firestore:"performance" json:"performance"`
	SnapshotLinks   map[string]SnapshotLink        `firestore:"snapshotLinks" json:"snapshotLinks"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken Access token value.
	AccessToken string `json:"accessToken"`

	// ExpiresIn The time duration in which the access token will be expired.
	ExpiresIn int    `json:"expiresIn"`
	Id        string `json:"id"`

	// MembershipId Membership identification value.
	MembershipId string `json:"membershipId"`

	// PrimaryMembershipId Membership that is mainly used
	PrimaryMembershipId string `json:"primaryMembershipId"`

	// RefreshExpiresIn The time duration in which the refresh token will be expired.
	RefreshExpiresIn int `json:"refreshExpiresIn"`

	// RefreshToken Refresh token for acquiring new access token after it is expired.
	RefreshToken string    `json:"refreshToken"`
	Timestamp    time.Time `json:"timestamp"`

	// TokenType Type of the access token.
	TokenType string `json:"tokenType"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `firestore:"bucketHash" json:"bucketHash"`
	Damage     *DamageInfo `firestore:"damageInfo" json:"damage,omitempty"`
	InstanceId string      `firestore:"instanceId" json:"instanceId"`
	ItemHash   int64       `firestore:"itemHash" json:"itemHash"`
	Name       string      `firestore:"name" json:"name"`
}

// Character defines model for Character.
type Character struct {
	Class               string                `firestore:"class" json:"class"`
	CurrentTitle        string                `firestore:"currentTitle" json:"currentTitle"`
	EmblemBackgroundURL string                `firestore:"emblemBackgroundURL" json:"emblemBackgroundURL"`
	EmblemURL           string                `firestore:"emblemURL" json:"emblemURL"`
	Id                  string                `firestore:"id" json:"id"`
	Light               int64                 `firestore:"light" json:"light"`
	Race                string                `firestore:"race" json:"race"`
	Stats               *map[string]ClassStat `json:"stats,omitempty"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// CharacterID Id of the character being recorded
	CharacterID string `firestore:"characterId" json:"characterId"`

	// CreatedAt Timestamp for when the snapshot was first created
	CreatedAt time.Time `firestore:"createdAt" json:"createdAt"`

	// Hash Hash of all the items to give us a unique key
	Hash string `firestore:"hash" json:"hash"`

	// ID Id of the snapshot
	ID string `firestore:"id" json:"id"`

	// Loadout All buckets that we currently care about, Kinetic, Energy, Heavy and Class for now. Each will be a key in the items.
	Loadout Loadout `firestore:"loadout" json:"loadout"`

	// Name Name of the snapshot, will probably be generated by default by the system but can be changed by a user
	Name  string                `firestore:"name" json:"name"`
	Stats *map[string]ClassStat `json:"stats,omitempty"`

	// UpdatedAt Timestamp for when the snapshot was last updated or when a history entry was made for it.
	UpdatedAt time.Time `firestore:"updatedAt" json:"updatedAt"`

	// UserID Id of the user it belongs to
	UserID string `firestore:"userId" json:"userId"`
}

// ClassStat defines model for ClassStat.
type ClassStat struct {
	AggregationType int    `firestore:"description" json:"aggregationType"`
	Description     string `firestore:"description" json:"description"`
	HasIcon         bool   `firestore:"hasIcon" json:"hasIcon"`
	Icon            string `firestore:"icon" json:"icon"`
	Name            string `firestore:"name" json:"name"`
	StatCategory    int    `firestore:"description" json:"statCategory"`
	Value           int32  `firestore:"value" json:"value"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `firestore:"alpha" json:"alpha"`
	Blue  int `firestore:"blue" json:"blue"`
	Green int `firestore:"green" json:"green"`
	Red   int `firestore:"red" json:"red"`
}

// ConfidenceLevel defines model for ConfidenceLevel.
type ConfidenceLevel string

// ConfidenceSource defines model for ConfidenceSource.
type ConfidenceSource string

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `firestore:"color" json:"color"`
	DamageIcon      string `firestore:"damageIcon" json:"damageIcon"`
	DamageType      string `firestore:"damageType" json:"damageType"`
	TransparentIcon string `firestore:"transparentIcon" json:"transparentIcon"`
}

// DestinyMembership defines model for DestinyMembership.
type DestinyMembership struct {
	DisplayName    string       `json:"displayName"`
	IconPath       *string      `json:"iconPath,omitempty"`
	MembershipID   string       `json:"membershipId"`
	MembershipType SourceSystem `json:"membershipType"`
}

// DetailActivity defines model for DetailActivity.
type DetailActivity struct {
	Activity  ActivityHistory `firestore:"activityHistory" json:"activity"`
	Aggregate *Aggregate      `json:"aggregate,omitempty"`
}

// Display defines model for Display.
type Display struct {
	Description string  `firestore:"description" json:"description"`
	HasIcon     bool    `firestore:"hasIcon" json:"hasIcon"`
	Icon        *string `firestore:"icon" json:"icon,omitempty"`
	Name        string  `firestore:"name" json:"name"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `firestore:"description" json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `firestore:"hash" json:"hash"`
	Name string `firestore:"name" json:"name"`

	// Value The value of the stat.
	Value int64 `firestore:"value" json:"value"`
}

// InstancePerformance defines model for InstancePerformance.
type InstancePerformance struct {
	Extra *map[string]UniqueStatValue `firestore:"extra" json:"extra,omitempty"`

	// PlayerStats All Player Stats from a match that we currently care about
	PlayerStats PlayerStats                      `firestore:"playerStats" json:"playerStats"`
	Weapons     map[string]WeaponInstanceMetrics `firestore:"weapons" json:"weapons"`
}

// InternalError defines model for InternalError.
type InternalError string

// ItemProperties The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemProperties struct {
	BaseInfo BaseItemInfo `firestore:"baseItemInfo" json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `firestore:"characterId" json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `firestore:"perks" json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `firestore:"sockets" json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `firestore:"stats" json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// BucketHash Hash of which bucket this item can be equipped in
	BucketHash *int64 `firestore:"bucketHash" json:"bucketHash,omitempty"`

	// ItemProperties The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemProperties ItemProperties `firestore:"itemProperties" json:"details"`

	// InstanceID Specific instance id for the item
	InstanceID string `firestore:"instanceId" json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `firestore:"itemHash" json:"itemHash"`

	// Name Name of the particular item
	Name string `firestore:"name" json:"name"`
}

// Loadout All buckets that we currently care about, Kinetic, Energy, Heavy and Class for now. Each will be a key in the items.
type Loadout map[string]ItemSnapshot

// Perk defines model for Perk.
type Perk struct {
	Description *string `firestore:"description" json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `firestore:"hash" json:"hash"`

	// IconPath link to icon
	IconPath *string `firestore:"iconPath" json:"iconPath,omitempty"`
	Name     string  `firestore:"name" json:"name"`
}

// PlayerStats All Player Stats from a match that we currently care about
type PlayerStats struct {
	// Assists Number of assists done in the match
	Assists *StatsValuePair `firestore:"assists" json:"assists,omitempty"`

	// Deaths Number of deaths done in the match
	Deaths *StatsValuePair `firestore:"deaths" json:"deaths,omitempty"`

	// FireTeamID ID for the fireteam player was on. If the same as another player then they were together
	FireTeamID *StatsValuePair `firestore:"fireTeamId" json:"fireTeamId,omitempty"`

	// Kd ratio of kill / deaths in the match
	Kd *StatsValuePair `firestore:"kd" json:"kd,omitempty"`

	// Kda ratio of kills + assists/ deaths in the match
	Kda *StatsValuePair `firestore:"kda" json:"kda,omitempty"`

	// Kills Number of kills done in the match
	Kills *StatsValuePair `firestore:"kills" json:"kills,omitempty"`

	// Standing Win or lose in the match
	Standing *StatsValuePair `firestore:"standing" json:"standing,omitempty"`

	// Team Id for the team the player was on this match
	Team *StatsValuePair `firestore:"team" json:"team,omitempty"`

	// TimePlayed Time in seconds the player was in the match
	TimePlayed *StatsValuePair `firestore:"timePlayed" json:"timePlayed,omitempty"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Profile defines model for Profile.
type Profile struct {
	Characters   []Character `json:"characters"`
	DisplayName  string      `json:"displayName"`
	Id           string      `json:"id"`
	MembershipId string      `json:"membershipId"`
	UniqueName   string      `json:"uniqueName"`
}

// SearchUserResult defines model for SearchUserResult.
type SearchUserResult struct {
	BungieMembershipID string              `json:"bungieMembershipId"`
	DisplayName        string              `json:"displayName"`
	Memberships        []DestinyMembership `json:"memberships"`
	NameCode           string              `json:"nameCode"`
}

// Session defines model for Session.
type Session struct {
	// AggregateIDs List of aggregates linked to this session
	AggregateIDs       []string       `firestore:"aggregateIds" json:"aggregateIds"`
	CharacterID        string         `firestore:"characterId" json:"characterId"`
	CompletedAt        *time.Time     `firestore:"completedAt" json:"completedAt,omitempty"`
	ID                 string         `firestore:"id" json:"id"`
	LastSeenActivityID *string        `firestore:"lastSeenActivityId" json:"lastSeenActivityId,omitempty"`
	LastSeenTimestamp  *time.Time     `firestore:"lastSeenTimestamp" json:"lastSeenTimestamp,omitempty"`
	Name               *string        `firestore:"name" json:"name,omitempty"`
	StartedAt          time.Time      `firestore:"startedAt" json:"startedAt"`
	Status             *SessionStatus `firestore:"status" json:"status,omitempty"`
	UserID             string         `firestore:"userId" json:"userId"`
}

// SessionStatus defines model for Session.Status.
type SessionStatus string

// SnapshotLink defines model for SnapshotLink.
type SnapshotLink struct {
	CharacterID      string           `firestore:"characterId" json:"characterId"`
	ConfidenceLevel  ConfidenceLevel  `firestore:"confidenceLevel" json:"confidenceLevel"`
	ConfidenceSource ConfidenceSource `firestore:"confidenceSource" json:"confidenceSource"`
	CreatedAt        time.Time        `firestore:"createdAt" json:"createdAt"`

	// SessionID Optional ID of a session if this Snapshot link was added by a session check-in. Will be null in the case, where the link is added after the fact
	SessionID *string `firestore:"sessionId" json:"sessionId,omitempty"`

	// SnapshotID ID of the snapshot for the particular player
	SnapshotID *string `firestore:"snapshotId" json:"snapshotId,omitempty"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `firestore:"description" json:"description"`
	Icon        *string `firestore:"icon" json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `firestore:"isEnabled" json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible                 *bool   `firestore:"isVisible" json:"isVisible,omitempty"`
	ItemTypeDisplayName       *string `firestore:"itemTypeDisplayName" json:"itemTypeDisplayName,omitempty"`
	ItemTypeTieredDisplayName *string `firestore:"itemTypeTieredDisplayName" json:"itemTypeTieredDisplayName,omitempty"`
	Name                      string  `firestore:"name" json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `firestore:"plugHash" json:"plugHash"`
}

// SourceSystem defines model for SourceSystem.
type SourceSystem string

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `firestore:"displayValue" json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `firestore:"value" json:"value,omitempty"`
}

// Team defines model for Team.
type Team struct {
	ID       string  `json:"id"`
	Score    string  `json:"score"`
	Standing string  `json:"standing"`
	TeamName *string `json:"teamName,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityID When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityID *int64 `firestore:"activityId" json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `firestore:"basic" json:"basic"`
	Name  *string        `firestore:"name" json:"name,omitempty"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `firestore:"pga" json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `firestore:"weighted" json:"weighted,omitempty"`
}

// WeaponInstanceMetrics defines model for WeaponInstanceMetrics.
type WeaponInstanceMetrics struct {
	Display *Display `firestore:"display" json:"display,omitempty"`

	// ItemProperties The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemProperties *ItemProperties `firestore:"itemProperties" json:"properties,omitempty"`

	// ReferenceID The hash ID of the item definition that describes the weapon.
	ReferenceID *int64                      `firestore:"referenceId" json:"referenceId,omitempty"`
	Stats       *map[string]UniqueStatValue `firestore:"stats" json:"stats,omitempty"`
}

// XMembershipID defines model for X-Membership-ID.
type XMembershipID = string

// XUserID defines model for X-User-ID.
type XUserID = string

// SessionCheckInJSONBody defines parameters for SessionCheckIn.
type SessionCheckInJSONBody struct {
	SessionID string `json:"sessionId"`
}

// SessionCheckInParams defines parameters for SessionCheckIn.
type SessionCheckInParams struct {
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count         int64         `form:"count" json:"count"`
	Page          int64         `form:"page" json:"page"`
	CharacterID   string        `form:"characterId" json:"characterId"`
	Mode          *ActivityMode `form:"mode,omitempty" json:"mode,omitempty"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetActivityParams defines parameters for GetActivity.
type GetActivityParams struct {
	CharacterID   string        `form:"characterId" json:"characterId"`
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Code string `json:"code"`
}

// ProfileParams defines parameters for Profile.
type ProfileParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetPublicProfileParams defines parameters for GetPublicProfile.
type GetPublicProfileParams struct {
	ID string `form:"id" json:"id"`
}

// GetPublicSessionsParams defines parameters for GetPublicSessions.
type GetPublicSessionsParams struct {
	Count       int64                          `form:"count" json:"count"`
	Page        int64                          `form:"page" json:"page"`
	CharacterID *string                        `form:"characterId,omitempty" json:"characterId,omitempty"`
	Status      *GetPublicSessionsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetPublicSessionsParamsStatus defines parameters for GetPublicSessions.
type GetPublicSessionsParamsStatus string

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	Code string `json:"code"`
}

// SearchJSONBody defines parameters for Search.
type SearchJSONBody struct {
	Page   int32  `json:"page"`
	Prefix string `json:"prefix"`
}

// GetSessionsParams defines parameters for GetSessions.
type GetSessionsParams struct {
	Count         int64                    `form:"count" json:"count"`
	Page          int64                    `form:"page" json:"page"`
	CharacterID   string                   `form:"characterId" json:"characterId"`
	Status        *GetSessionsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	XUserID       XUserID                  `json:"X-User-ID"`
	XMembershipID XMembershipID            `json:"X-Membership-ID"`
}

// GetSessionsParamsStatus defines parameters for GetSessions.
type GetSessionsParamsStatus string

// StartSessionJSONBody defines parameters for StartSession.
type StartSessionJSONBody struct {
	CharacterID string `json:"characterId"`
}

// StartSessionParams defines parameters for StartSession.
type StartSessionParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// UpdateSessionJSONBody defines parameters for UpdateSession.
type UpdateSessionJSONBody struct {
	CharacterID string  `json:"characterId"`
	CompletedAt *string `json:"completedAt,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateSessionParams defines parameters for UpdateSession.
type UpdateSessionParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count       int64   `form:"count" json:"count"`
	Page        int64   `form:"page" json:"page"`
	CharacterID string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// CreateSnapshotJSONBody defines parameters for CreateSnapshot.
type CreateSnapshotJSONBody struct {
	CharacterID string `json:"characterId"`
}

// CreateSnapshotParams defines parameters for CreateSnapshot.
type CreateSnapshotParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// GetSnapshotParams defines parameters for GetSnapshot.
type GetSnapshotParams struct {
	CharacterID string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// SessionCheckInJSONRequestBody defines body for SessionCheckIn for application/json ContentType.
type SessionCheckInJSONRequestBody SessionCheckInJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody SearchJSONBody

// StartSessionJSONRequestBody defines body for StartSession for application/json ContentType.
type StartSessionJSONRequestBody StartSessionJSONBody

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody UpdateSessionJSONBody

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody CreateSnapshotJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /actions/session-checkin)
	SessionCheckIn(c *gin.Context, params SessionCheckInParams)

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityID string, params GetActivityParams)

	// (POST /login)
	Login(c *gin.Context)

	// (POST /manifest)
	UpdateManifest(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /profile)
	Profile(c *gin.Context, params ProfileParams)

	// (GET /public/profile)
	GetPublicProfile(c *gin.Context, params GetPublicProfileParams)

	// (GET /public/sessions)
	GetPublicSessions(c *gin.Context, params GetPublicSessionsParams)

	// (GET /public/sessions/{sessionId})
	GetPublicSession(c *gin.Context, sessionId string)

	// (GET /public/sessions/{sessionId}/aggregates)
	GetPublicSessionAggregates(c *gin.Context, sessionId string)

	// (POST /refresh)
	RefreshToken(c *gin.Context)

	// (POST /search)
	Search(c *gin.Context)

	// (GET /sessions)
	GetSessions(c *gin.Context, params GetSessionsParams)

	// (POST /sessions)
	StartSession(c *gin.Context, params StartSessionParams)

	// (GET /sessions/{sessionId})
	GetSession(c *gin.Context, sessionId string)

	// (PUT /sessions/{sessionId})
	UpdateSession(c *gin.Context, sessionId string, params UpdateSessionParams)

	// (GET /sessions/{sessionId}/aggregates)
	GetSessionAggregates(c *gin.Context, sessionId string)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context, params CreateSnapshotParams)

	// (GET /snapshots/{snapshotId})
	GetSnapshot(c *gin.Context, snapshotID string, params GetSnapshotParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SessionCheckIn operation middleware
func (siw *ServerInterfaceWrapper) SessionCheckIn(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SessionCheckInParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SessionCheckIn(c, params)
}

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", c.Request.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mode: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityID string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivityParams

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityID, params)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// UpdateManifest operation middleware
func (siw *ServerInterfaceWrapper) UpdateManifest(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateManifest(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// Profile operation middleware
func (siw *ServerInterfaceWrapper) Profile(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Profile(c, params)
}

// GetPublicProfile operation middleware
func (siw *ServerInterfaceWrapper) GetPublicProfile(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPublicProfileParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicProfile(c, params)
}

// GetPublicSessions operation middleware
func (siw *ServerInterfaceWrapper) GetPublicSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPublicSessionsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "characterId" -------------

	err = runtime.BindQueryParameter("form", true, false, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicSessions(c, params)
}

// GetPublicSession operation middleware
func (siw *ServerInterfaceWrapper) GetPublicSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicSession(c, sessionId)
}

// GetPublicSessionAggregates operation middleware
func (siw *ServerInterfaceWrapper) GetPublicSessionAggregates(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicSessionAggregates(c, sessionId)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Search(c)
}

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessions(c, params)
}

// StartSession operation middleware
func (siw *ServerInterfaceWrapper) StartSession(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StartSessionParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartSession(c, params)
}

// GetSession operation middleware
func (siw *ServerInterfaceWrapper) GetSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSession(c, sessionId)
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateSessionParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSession(c, sessionId, params)
}

// GetSessionAggregates operation middleware
func (siw *ServerInterfaceWrapper) GetSessionAggregates(c *gin.Context) {

	var err error

	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", c.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessionAggregates(c, sessionId)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSnapshotParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c, params)
}

// GetSnapshot operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "snapshotId" -------------
	var snapshotID string

	err = runtime.BindStyledParameterWithOptions("simple", "snapshotId", c.Param("snapshotId"), &snapshotID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter snapshotId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotParams

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshot(c, snapshotID, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/actions/session-checkin", wrapper.SessionCheckIn)
	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.POST(options.BaseURL+"/manifest", wrapper.UpdateManifest)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/profile", wrapper.Profile)
	router.GET(options.BaseURL+"/public/profile", wrapper.GetPublicProfile)
	router.GET(options.BaseURL+"/public/sessions", wrapper.GetPublicSessions)
	router.GET(options.BaseURL+"/public/sessions/:sessionId", wrapper.GetPublicSession)
	router.GET(options.BaseURL+"/public/sessions/:sessionId/aggregates", wrapper.GetPublicSessionAggregates)
	router.POST(options.BaseURL+"/refresh", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/search", wrapper.Search)
	router.GET(options.BaseURL+"/sessions", wrapper.GetSessions)
	router.POST(options.BaseURL+"/sessions", wrapper.StartSession)
	router.GET(options.BaseURL+"/sessions/:sessionId", wrapper.GetSession)
	router.PUT(options.BaseURL+"/sessions/:sessionId", wrapper.UpdateSession)
	router.GET(options.BaseURL+"/sessions/:sessionId/aggregates", wrapper.GetSessionAggregates)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
	router.GET(options.BaseURL+"/snapshots/:snapshotId", wrapper.GetSnapshot)
}

type SessionCheckInRequestObject struct {
	Params SessionCheckInParams
	Body   *SessionCheckInJSONRequestBody
}

type SessionCheckInResponseObject interface {
	VisitSessionCheckInResponse(w http.ResponseWriter) error
}

type SessionCheckIn200JSONResponse bool

func (response SessionCheckIn200JSONResponse) VisitSessionCheckInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []DetailActivity

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityID string `json:"activityId"`
	Params     GetActivityParams
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity        ActivityHistory           `firestore:"activityHistory" json:"activity"`
	Aggregate       *Aggregate                `json:"aggregate,omitempty"`
	PostGameEntries *[]map[string]interface{} `json:"postGameEntries,omitempty"`
	Teams           []Team                    `json:"teams"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse AuthResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateManifestRequestObject struct {
}

type UpdateManifestResponseObject interface {
	VisitUpdateManifestResponse(w http.ResponseWriter) error
}

type UpdateManifest200JSONResponse struct {
	Success bool `json:"success"`
}

func (response UpdateManifest200JSONResponse) VisitUpdateManifestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileRequestObject struct {
	Params ProfileParams
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Profile503JSONResponse struct {
	// Message User friendly description of the error
	Message string        `json:"message"`
	Status  InternalError `json:"status"`
}

func (response Profile503JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicProfileRequestObject struct {
	Params GetPublicProfileParams
}

type GetPublicProfileResponseObject interface {
	VisitGetPublicProfileResponse(w http.ResponseWriter) error
}

type GetPublicProfile200JSONResponse Profile

func (response GetPublicProfile200JSONResponse) VisitGetPublicProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicProfile503JSONResponse struct {
	// Message User friendly description of the error
	Message string        `json:"message"`
	Status  InternalError `json:"status"`
}

func (response GetPublicProfile503JSONResponse) VisitGetPublicProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicSessionsRequestObject struct {
	Params GetPublicSessionsParams
}

type GetPublicSessionsResponseObject interface {
	VisitGetPublicSessionsResponse(w http.ResponseWriter) error
}

type GetPublicSessions200JSONResponse []Session

func (response GetPublicSessions200JSONResponse) VisitGetPublicSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicSessionRequestObject struct {
	SessionId string `json:"sessionId"`
}

type GetPublicSessionResponseObject interface {
	VisitGetPublicSessionResponse(w http.ResponseWriter) error
}

type GetPublicSession200JSONResponse Session

func (response GetPublicSession200JSONResponse) VisitGetPublicSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicSessionAggregatesRequestObject struct {
	SessionId string `json:"sessionId"`
}

type GetPublicSessionAggregatesResponseObject interface {
	VisitGetPublicSessionAggregatesResponse(w http.ResponseWriter) error
}

type GetPublicSessionAggregates200JSONResponse struct {
	Aggregates []Aggregate                  `json:"aggregates"`
	Snapshots  map[string]CharacterSnapshot `json:"snapshots"`
}

func (response GetPublicSessionAggregates200JSONResponse) VisitGetPublicSessionAggregatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse AuthResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchRequestObject struct {
	Body *SearchJSONRequestBody
}

type SearchResponseObject interface {
	VisitSearchResponse(w http.ResponseWriter) error
}

type Search200JSONResponse struct {
	HasMore bool               `json:"hasMore"`
	Results []SearchUserResult `json:"results"`
}

func (response Search200JSONResponse) VisitSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionsRequestObject struct {
	Params GetSessionsParams
}

type GetSessionsResponseObject interface {
	VisitGetSessionsResponse(w http.ResponseWriter) error
}

type GetSessions200JSONResponse []Session

func (response GetSessions200JSONResponse) VisitGetSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StartSessionRequestObject struct {
	Params StartSessionParams
	Body   *StartSessionJSONRequestBody
}

type StartSessionResponseObject interface {
	VisitStartSessionResponse(w http.ResponseWriter) error
}

type StartSession201JSONResponse Session

func (response StartSession201JSONResponse) VisitStartSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type StartSession400JSONResponse struct {
	Message string `json:"message"`
}

func (response StartSession400JSONResponse) VisitStartSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionRequestObject struct {
	SessionId string `json:"sessionId"`
}

type GetSessionResponseObject interface {
	VisitGetSessionResponse(w http.ResponseWriter) error
}

type GetSession200JSONResponse Session

func (response GetSession200JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionRequestObject struct {
	SessionId string `json:"sessionId"`
	Params    UpdateSessionParams
	Body      *UpdateSessionJSONRequestBody
}

type UpdateSessionResponseObject interface {
	VisitUpdateSessionResponse(w http.ResponseWriter) error
}

type UpdateSession201JSONResponse Session

func (response UpdateSession201JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionAggregatesRequestObject struct {
	SessionId string `json:"sessionId"`
}

type GetSessionAggregatesResponseObject interface {
	VisitGetSessionAggregatesResponse(w http.ResponseWriter) error
}

type GetSessionAggregates200JSONResponse struct {
	Aggregates []Aggregate                  `json:"aggregates"`
	Snapshots  map[string]CharacterSnapshot `json:"snapshots"`
}

func (response GetSessionAggregates200JSONResponse) VisitGetSessionAggregatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
	Params CreateSnapshotParams
	Body   *CreateSnapshotJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotRequestObject struct {
	SnapshotID string `json:"snapshotId"`
	Params     GetSnapshotParams
}

type GetSnapshotResponseObject interface {
	VisitGetSnapshotResponse(w http.ResponseWriter) error
}

type GetSnapshot200JSONResponse CharacterSnapshot

func (response GetSnapshot200JSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /actions/session-checkin)
	SessionCheckIn(ctx context.Context, request SessionCheckInRequestObject) (SessionCheckInResponseObject, error)

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (POST /manifest)
	UpdateManifest(ctx context.Context, request UpdateManifestRequestObject) (UpdateManifestResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (GET /profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (GET /public/profile)
	GetPublicProfile(ctx context.Context, request GetPublicProfileRequestObject) (GetPublicProfileResponseObject, error)

	// (GET /public/sessions)
	GetPublicSessions(ctx context.Context, request GetPublicSessionsRequestObject) (GetPublicSessionsResponseObject, error)

	// (GET /public/sessions/{sessionId})
	GetPublicSession(ctx context.Context, request GetPublicSessionRequestObject) (GetPublicSessionResponseObject, error)

	// (GET /public/sessions/{sessionId}/aggregates)
	GetPublicSessionAggregates(ctx context.Context, request GetPublicSessionAggregatesRequestObject) (GetPublicSessionAggregatesResponseObject, error)

	// (POST /refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (POST /search)
	Search(ctx context.Context, request SearchRequestObject) (SearchResponseObject, error)

	// (GET /sessions)
	GetSessions(ctx context.Context, request GetSessionsRequestObject) (GetSessionsResponseObject, error)

	// (POST /sessions)
	StartSession(ctx context.Context, request StartSessionRequestObject) (StartSessionResponseObject, error)

	// (GET /sessions/{sessionId})
	GetSession(ctx context.Context, request GetSessionRequestObject) (GetSessionResponseObject, error)

	// (PUT /sessions/{sessionId})
	UpdateSession(ctx context.Context, request UpdateSessionRequestObject) (UpdateSessionResponseObject, error)

	// (GET /sessions/{sessionId}/aggregates)
	GetSessionAggregates(ctx context.Context, request GetSessionAggregatesRequestObject) (GetSessionAggregatesResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)

	// (GET /snapshots/{snapshotId})
	GetSnapshot(ctx context.Context, request GetSnapshotRequestObject) (GetSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SessionCheckIn operation middleware
func (sh *strictHandler) SessionCheckIn(ctx *gin.Context, params SessionCheckInParams) {
	var request SessionCheckInRequestObject

	request.Params = params

	var body SessionCheckInJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionCheckIn(ctx, request.(SessionCheckInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionCheckIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SessionCheckInResponseObject); ok {
		if err := validResponse.VisitSessionCheckInResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityID string, params GetActivityParams) {
	var request GetActivityRequestObject

	request.ActivityID = activityID
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateManifest operation middleware
func (sh *strictHandler) UpdateManifest(ctx *gin.Context) {
	var request UpdateManifestRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateManifest(ctx, request.(UpdateManifestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateManifest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateManifestResponseObject); ok {
		if err := validResponse.VisitUpdateManifestResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Profile operation middleware
func (sh *strictHandler) Profile(ctx *gin.Context, params ProfileParams) {
	var request ProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx, request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		if err := validResponse.VisitProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublicProfile operation middleware
func (sh *strictHandler) GetPublicProfile(ctx *gin.Context, params GetPublicProfileParams) {
	var request GetPublicProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublicProfile(ctx, request.(GetPublicProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublicProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPublicProfileResponseObject); ok {
		if err := validResponse.VisitGetPublicProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublicSessions operation middleware
func (sh *strictHandler) GetPublicSessions(ctx *gin.Context, params GetPublicSessionsParams) {
	var request GetPublicSessionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublicSessions(ctx, request.(GetPublicSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublicSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPublicSessionsResponseObject); ok {
		if err := validResponse.VisitGetPublicSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublicSession operation middleware
func (sh *strictHandler) GetPublicSession(ctx *gin.Context, sessionId string) {
	var request GetPublicSessionRequestObject

	request.SessionId = sessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublicSession(ctx, request.(GetPublicSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublicSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPublicSessionResponseObject); ok {
		if err := validResponse.VisitGetPublicSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublicSessionAggregates operation middleware
func (sh *strictHandler) GetPublicSessionAggregates(ctx *gin.Context, sessionId string) {
	var request GetPublicSessionAggregatesRequestObject

	request.SessionId = sessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublicSessionAggregates(ctx, request.(GetPublicSessionAggregatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublicSessionAggregates")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPublicSessionAggregatesResponseObject); ok {
		if err := validResponse.VisitGetPublicSessionAggregatesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Search operation middleware
func (sh *strictHandler) Search(ctx *gin.Context) {
	var request SearchRequestObject

	var body SearchJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Search(ctx, request.(SearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Search")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchResponseObject); ok {
		if err := validResponse.VisitSearchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessions operation middleware
func (sh *strictHandler) GetSessions(ctx *gin.Context, params GetSessionsParams) {
	var request GetSessionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessions(ctx, request.(GetSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionsResponseObject); ok {
		if err := validResponse.VisitGetSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartSession operation middleware
func (sh *strictHandler) StartSession(ctx *gin.Context, params StartSessionParams) {
	var request StartSessionRequestObject

	request.Params = params

	var body StartSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartSession(ctx, request.(StartSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(StartSessionResponseObject); ok {
		if err := validResponse.VisitStartSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSession operation middleware
func (sh *strictHandler) GetSession(ctx *gin.Context, sessionId string) {
	var request GetSessionRequestObject

	request.SessionId = sessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSession(ctx, request.(GetSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionResponseObject); ok {
		if err := validResponse.VisitGetSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSession operation middleware
func (sh *strictHandler) UpdateSession(ctx *gin.Context, sessionId string, params UpdateSessionParams) {
	var request UpdateSessionRequestObject

	request.SessionId = sessionId
	request.Params = params

	var body UpdateSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSession(ctx, request.(UpdateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSessionResponseObject); ok {
		if err := validResponse.VisitUpdateSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessionAggregates operation middleware
func (sh *strictHandler) GetSessionAggregates(ctx *gin.Context, sessionId string) {
	var request GetSessionAggregatesRequestObject

	request.SessionId = sessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionAggregates(ctx, request.(GetSessionAggregatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionAggregates")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionAggregatesResponseObject); ok {
		if err := validResponse.VisitGetSessionAggregatesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context, params CreateSnapshotParams) {
	var request CreateSnapshotRequestObject

	request.Params = params

	var body CreateSnapshotJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshot operation middleware
func (sh *strictHandler) GetSnapshot(ctx *gin.Context, snapshotID string, params GetSnapshotParams) {
	var request GetSnapshotRequestObject

	request.SnapshotID = snapshotID
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshot(ctx, request.(GetSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotResponseObject); ok {
		if err := validResponse.VisitGetSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
