// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64  `json:"activityHash"`
	Description  string `json:"description"`

	// InstanceId Id to get more details about the particular game
	InstanceId string `json:"instanceId"`
	IsPrivate  *bool  `json:"isPrivate,omitempty"`
	Location   string `json:"location"`

	// Mode Name of the Destiny Activity Mode
	Mode        *string `json:"mode,omitempty"`
	ReferenceId int64   `json:"referenceId"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken Access token value.
	AccessToken string `json:"accessToken"`

	// ExpiresIn The time duration in which the access token will be expired.
	ExpiresIn int `json:"expiresIn"`

	// MembershipId Membership identification value.
	MembershipId string `json:"membershipId"`

	// RefreshExpiresIn The time duration in which the refresh token will be expired.
	RefreshExpiresIn int `json:"refreshExpiresIn"`

	// RefreshToken Refresh token for acquiring new access token after it is expired.
	RefreshToken string `json:"refreshToken"`

	// TokenType Type of the access token.
	TokenType string `json:"tokenType"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `json:"bucketHash"`
	Damage     *DamageInfo `json:"damage,omitempty"`
	InstanceId string      `json:"instanceId"`
	ItemHash   int64       `json:"itemHash"`
	Name       string      `json:"name"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// Items All items that we currently care about, Kinetic, Energy, Heavy and Class for now
	Items []ItemSnapshot `json:"items"`

	// Timestamp Timestamp that the items were equipped turning
	Timestamp time.Time `json:"timestamp"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `json:"alpha"`
	Blue  int `json:"blue"`
	Green int `json:"green"`
	Red   int `json:"red"`
}

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `json:"color"`
	DamageIcon      string `json:"damageIcon"`
	DamageType      string `json:"damageType"`
	TransparentIcon string `json:"transparentIcon"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `json:"hash"`
	Name string `json:"name"`

	// Value The value of the stat.
	Value int64 `json:"value"`
}

// HistoricalStats defines model for HistoricalStats.
type HistoricalStats = []UniqueStatValue

// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemDetails struct {
	BaseInfo BaseItemInfo `json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails ItemDetails `json:"details"`

	// InstanceId Specific instance id for the item
	InstanceId string `json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `json:"itemHash"`

	// Name Name of the particular item
	Name string `json:"name"`

	// Timestamp Time the data was grabbed
	Timestamp time.Time `json:"timestamp"`
}

// Perk defines model for Perk.
type Perk struct {
	Description *string `json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `json:"hash"`

	// IconPath link to icon
	IconPath *string `json:"iconPath,omitempty"`
	Name     string  `json:"name"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `json:"description"`
	Icon        *string `json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible *bool  `json:"isVisible,omitempty"`
	Name      string `json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `json:"plugHash"`
}

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `json:"basic"`
	Name  string         `json:"name"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `json:"weighted,omitempty"`
}

// WeaponStats defines model for WeaponStats.
type WeaponStats struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails *ItemDetails `json:"details,omitempty"`

	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *int64           `json:"referenceId,omitempty"`
	Stats       *HistoricalStats `json:"stats,omitempty"`
}

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Code string `json:"code"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	Code string `json:"code"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityId string)

	// (POST /login)
	Login(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (POST /refresh)
	RefreshToken(c *gin.Context)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityId)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.POST(options.BaseURL+"/refresh", wrapper.RefreshToken)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []ActivityHistory

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityId string `json:"activityId"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity ActivityHistory `json:"activity"`
	Stats    []WeaponStats   `json:"stats"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse AuthResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse AuthResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (POST /refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityId string) {
	var request GetActivityRequestObject

	request.ActivityId = activityId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context) {
	var request CreateSnapshotRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZXY/butH+K4TeF+iNsrtpi+LAd/nCyaL5cLPbBMU5uRhLY4lnKVIhKTtu4P9ezFCS",
	"ZYmyvSc5V+1NsLHI4cwzw4fPkN+SzFS10ai9SxbfEpeVWAH/+SzzciP97rV03tgd/VRbU6P1EnkAtAPo",
	"b7+rMVkkzlupi2Sf9h9fgytpQI4us7L20uhkkdCvQubCrIUvUdBs+rubtBB33soHTMULU9XopZcbTMU/",
	"Gpk9LBXsUoE+uxJJmqyNrcAni0Rq/7e/JmnniNQeC7TkydHKEU+ldh50hrf51M/bXHgjCvSiMhZFjh6k",
	"cgJWpvHseQ3Wy6xRYEUBFR4cGNh3Sys34HGw+soYhaDpszIZzPpWmRynXr2DCjvoXqLzUu9Ely3xlqZE",
	"3LC4Rot9nGeB4ylfGmkxTxa/HE0fZfcIwkFAx9AfJiWf+9XM6jfMPLn3rPHlB3S10Q5jpZahc/fmAfUU",
	"jmf8UXj6KjagGryKAYBfa2nR3UYs3FMNygpF3lj2XUgttqXMSsYYhgtspVJihSKYy6+iNVdhtULrSlnH",
	"qupt/1XIHLWXaxkgO+G9xbVFV7763UG0Bh4TRTtlBvYPRwbXxgrIqF6kLoTG7TFqsPZohfRCusiahzB5",
	"9D3/OomvJYlxRiJ2RrU7rJ7hEsOaGEUbAXyU1VgRPweHtx6rW7020yJeNdkD+o4QL2EuqKBgJP7f4jpZ",
	"JP93fWDr65aqr1/yKF5ywmZTMvJYPcIDTZw2tTPCVwfm622PCGEQdwy0FyVYyDzaOw21K42fIkeWXWTj",
	"KyX4k/AleLFFkTXWovZqJzKwGHg6FX+XGr3MUvFKoy12qXiNsNkJ0Ll4ocA5Ll5ttm0M7hzilOLe2X0f",
	"ElgLO/6/rNB5qOpIEXefgstUyyGCLVoUhGldYy58YzUhPTjgcvD4hCyfLfcQw9CNKOxGGRthWlWXMK6O",
	"aG2sVIMXDSwsBv44O5IDODtucjJRkYVFWq/SNoxY3IPtMgk+6zA5lf0AXL89b7OZszt87rhsynQWtKuB",
	"ynXGxCjOgb2jtaem0jaQWPg/N/rOQ2SPnZNJZVTI0aFDX8Tty46bnQd/dZk0m6GXNOFzML4af3r0WnHG",
	"KgNbhdWO5UoMu6CEZQaKIDxmplMV808tvzRIcz7yShHKIEp5GdRlPGzbaiMR3GHKsuitxA0duECnfS43",
	"Mm9AiY5+cyaXK/HO6A4yh+LgoSCStKhwAzqYJDseq8BOuUGn/+RFCRukL79yuLc9t/+aLHiSL43DlGXy",
	"zjRWSB3yQRpkbU01FKq3eoOa+omXuJZa0hhK4OikpHO03aGngD06b/dpknVHSVTLr3u6JRVitADRT0iF",
	"L6ULssgi0S8PPlR1PzJAI50ojcoJ+s4ohaEbpWClMFl422BE39RoHyIZvh0g5mrMWBEqtRt2GjRzcMCx",
	"mkYKo3dAvHj/dvn+3at39+L+X8tXC0HYLHnFC082GhwrT2foCD/j+MHXdniHHS29aKUoVdw4iFRsCdPa",
	"eBLDoPr5O9OIzDQq70ow73e9u4aVVJIq5jpAw4NBiwLkoexmQLlr47kQljA8CkxHBKDU+3Wy+OWMIR6+",
	"/5xeBCMZaDzmIeBjNGuzparNcY2aNh81xFczwfKiEz4bUWLd1olrR/d7cMKEafL1SWGeBPI+Yq6WyOaF",
	"XH6guHMCa2DzVId+1+6WnvOEzFtSClBFW/KBCp40/I1D7vrXsi23vGeqYQoed8LNN/CDG4Q5d8/oyeAk",
	"eBBbcKKwsFqxJPod0vGwUtrnaqTmByqfg4sdlEwjf5zCoFK9DH6ZGb0EHzGrpH6gLMtWQo2deVTnU871",
	"NkujiykQtQy/4leoajosktqw2D+9GE+LrdLS06MBl3PSVbpXmo6xyH77VKIv0Q5oXtSqKbivD3MEN1N+",
	"0JYPbruk+yid5BPyEZY3Yc5Jy7Nakoy8vli8Hha+Oi8je9NpVwnnJGQvHCHPmVJALY9ydooWO+2+jzFy",
	"LjO2Z3dPHnAXL11enTXoEmSk+culqxXsPsbV9xuTgZL/RubXCjydTBu0bkCM8/dXM4r+A2ynil46L7Mj",
	"AjMNlUxvVjfVqk3HBOGx2J69tr6NVzfJQnJCWKwtOpbJ5NgKnU9FZehfZXTB/12D8+g8FaYzxOlcwTVa",
	"R5lt54QLK0/CvFubKm5bUsvPavJoArM4sfBKSVeShncCNiBZWAa9J51oY9pFu58ZGTps3sHJ7JG65VA4",
	"UwHznOwF3MY1cEjN/BYt4Af6ssRwGS9ggxYK7OVAX1upkGsBda1kBkeFdfB1i7IofWDAH+TXp9bktODZ",
	"HRGWFIVFaPsMLZ4SQYkVUlk6Jwt9dG86I+VaLgo5jrHQJ4Ta6J6LfoRGGz0vnCVabsMGyio0nDxrhWHH",
	"bdnLC68SeiF+yudxAx8hkD3rzdB6HgfxXqO4tzJ74Ks1z+f28LeWCpNF8vTq5uqGnDI1aqhlskj+wj+l",
	"SQ2+ZDevWypoQS/C+U154C6AUEx+Rv/sMIomW6jQo3VcjJLW+tKg3XXnzyLJTMN3ZodyCAwQELjw4Sdu",
	"uoYCv9PyZ5oe7jE46j/f3IRrN02dH2+1sCkJguvfXJAnhxUuatbG75aTrm0/fhRM3kji8LU4oB3qkbvO",
	"GhzXxT4dJu362+Ec2V+Qwd00f9M90vDZ1T8Koe2pq1vsiuU4Z8OXh9wMzrRTGRorgu/Nx/x78CMT5B51",
	"nzakr2l2x28/Pfxhkc/RLT96WCBTVBDcCxaNdiJvbHvP1ltsa0KZQjIutXGREnjDn4NT6Pxzk+++A+Os",
	"fRA+3SnwqFig++9M+Mm0Dl9wY5vMFAVBKHWHXNcHzW2dZXgC+cM85u4s4in51V+4ds6274Hzif4wfj/8",
	"L893iwdfkTImLZCuvR0annvjmb6x2gkQqiXmfo6Q4b7T7Vy4LJkUzV1v/n8H5mV0On2AveDIDL91O+H4",
	"2wtWsJQ/jds+d8ep48tcO0n0JKPBVu/ZBI+nP6yeIzDEirp/G8jYs7yPj+ubzjK0m67iGquSRVJ6Xy+u",
	"rxX1z6VxfvHTzU83yf7z/j8BAAD//8ALtFp+JQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
