// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ActivityHistory defines model for ActivityHistory.
type ActivityHistory struct {
	Activity string `json:"activity"`

	// ActivityHash Hash id of the type of activity: Strike, Competitive, QuickPlay, etc.
	ActivityHash int64  `json:"activityHash"`
	Description  string `json:"description"`

	// InstanceId Id to get more details about the particular game
	InstanceId string `json:"instanceId"`
	IsPrivate  *bool  `json:"isPrivate,omitempty"`
	Location   string `json:"location"`

	// Mode Name of the Destiny Activity Mode
	Mode        *string `json:"mode,omitempty"`
	ReferenceId int64   `json:"referenceId"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken Access token value.
	AccessToken string `json:"accessToken"`

	// ExpiresIn The time duration in which the access token will be expired.
	ExpiresIn int    `json:"expiresIn"`
	Id        string `json:"id"`

	// MembershipId Membership identification value.
	MembershipId string `json:"membershipId"`

	// PrimaryMembershipId Membership that is mainly used
	PrimaryMembershipId string `json:"primaryMembershipId"`

	// RefreshExpiresIn The time duration in which the refresh token will be expired.
	RefreshExpiresIn int `json:"refreshExpiresIn"`

	// RefreshToken Refresh token for acquiring new access token after it is expired.
	RefreshToken string `json:"refreshToken"`

	// TokenType Type of the access token.
	TokenType string `json:"tokenType"`
}

// BaseItemInfo defines model for BaseItemInfo.
type BaseItemInfo struct {
	BucketHash int64       `firestore:"bucketHash" json:"bucketHash"`
	Damage     *DamageInfo `firestore:"damageInfo" json:"damage,omitempty"`
	InstanceId string      `firestore:"instanceId" json:"instanceId"`
	ItemHash   int64       `firestore:"itemHash" json:"itemHash"`
	Name       string      `firestore:"name" json:"name"`
}

// Character defines model for Character.
type Character struct {
	ClassId              int    `firestore:"classId" json:"classId"`
	EmblemBackgroundPath string `firestore:"emblemBackgroundPath" json:"emblemBackgroundPath"`
	EmblemPath           string `firestore:"emblemPath" json:"emblemPath"`
	Id                   string `firestore:"id" json:"id"`
	Light                int64  `firestore:"light" json:"light"`
	RaceId               int    `firestore:"raceId" json:"raceId"`
	TitleId              int64  `firestore:"titleId" json:"titleId"`
}

// CharacterSnapshot defines model for CharacterSnapshot.
type CharacterSnapshot struct {
	// CharacterId Id of the character being recorded
	CharacterId string `firestore:"characterId" json:"characterId"`

	// Items All items that we currently care about, Kinetic, Energy, Heavy and Class for now
	Items []ItemSnapshot `firestore:"items" json:"items"`

	// Timestamp Timestamp that the items were equipped turning
	Timestamp time.Time `firestore:"timestamp" json:"timestamp"`
}

// Color defines model for Color.
type Color struct {
	Alpha int `firestore:"alpha" json:"alpha"`
	Blue  int `firestore:"blue" json:"blue"`
	Green int `firestore:"green" json:"green"`
	Red   int `firestore:"red" json:"red"`
}

// DamageInfo defines model for DamageInfo.
type DamageInfo struct {
	Color           Color  `firestore:"color" json:"color"`
	DamageIcon      string `firestore:"damageIcon" json:"damageIcon"`
	DamageType      string `firestore:"damageType" json:"damageType"`
	TransparentIcon string `firestore:"transparentIcon" json:"transparentIcon"`
}

// GunStat defines model for GunStat.
type GunStat struct {
	Description string `firestore:"description" json:"description"`

	// Hash The hash ID of the stat.
	Hash int64  `firestore:"hash" json:"hash"`
	Name string `firestore:"name" json:"name"`

	// Value The value of the stat.
	Value int64 `firestore:"value" json:"value"`
}

// HistoricalStats defines model for HistoricalStats.
type HistoricalStats = []UniqueStatValue

// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type ItemDetails struct {
	BaseInfo BaseItemInfo `firestore:"baseItemInfo" json:"baseInfo"`

	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `firestore:"characterId" json:"characterId"`

	// Perks Information specifically about the perks currently active on the item. COMPONENT TYPE: ItemPerks
	Perks []Perk `firestore:"perks" json:"perks"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them. COMPONENT TYPE: ItemSockets
	Sockets *[]Socket `firestore:"sockets" json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc... COMPONENT TYPE: ItemStats
	Stats Stats `firestore:"stats" json:"stats"`
}

// ItemSnapshot defines model for ItemSnapshot.
type ItemSnapshot struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails ItemDetails `firestore:"itemDetails" json:"details"`

	// InstanceId Specific instance id for the item
	InstanceId string `firestore:"instanceId" json:"instanceId"`

	// ItemHash Id used to find the definition of the item
	ItemHash int64 `firestore:"itemHash" json:"itemHash"`

	// Name Name of the particular item
	Name string `firestore:"name" json:"name"`

	// Timestamp Time the data was grabbed
	Timestamp time.Time `firestore:"timestamp" json:"timestamp"`
}

// Perk defines model for Perk.
type Perk struct {
	Description *string `firestore:"description" json:"description,omitempty"`

	// Hash The hash ID of the perk
	Hash int64 `firestore:"hash" json:"hash"`

	// IconPath link to icon
	IconPath *string `firestore:"iconPath" json:"iconPath,omitempty"`
	Name     string  `firestore:"name" json:"name"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// Profile defines model for Profile.
type Profile struct {
	Characters  []Character `json:"characters"`
	DisplayName string      `json:"displayName"`
	Id          string      `json:"id"`
	MemberId    *string     `json:"memberId,omitempty"`
	UniqueName  string      `json:"uniqueName"`
}

// Socket defines model for Socket.
type Socket struct {
	Description string  `firestore:"description" json:"description"`
	Icon        *string `firestore:"icon" json:"icon,omitempty"`

	// IsEnabled Whether the socket plug is enabled or not.
	IsEnabled *bool `firestore:"isEnabled" json:"isEnabled,omitempty"`

	// IsVisible Whether the socket plug is visible or not.
	IsVisible *bool  `firestore:"isVisible" json:"isVisible,omitempty"`
	Name      string `firestore:"name" json:"name"`

	// PlugHash The hash ID of the socket plug.
	PlugHash int `firestore:"plugHash" json:"plugHash"`
}

// Stats defines model for Stats.
type Stats map[string]GunStat

// StatsValuePair defines model for StatsValuePair.
type StatsValuePair struct {
	// DisplayValue Localized formatted version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// UniqueStatValue defines model for UniqueStatValue.
type UniqueStatValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic StatsValuePair `json:"basic"`
	Name  string         `json:"name"`

	// Pga Per game average for the statistic, if applicable
	Pga *StatsValuePair `json:"pga,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *StatsValuePair `json:"weighted,omitempty"`
}

// WeaponStats defines model for WeaponStats.
type WeaponStats struct {
	// ItemDetails The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	ItemDetails *ItemDetails `firestore:"itemDetails" json:"details,omitempty"`

	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *int64           `json:"referenceId,omitempty"`
	Stats       *HistoricalStats `json:"stats,omitempty"`
}

// XMembershipID defines model for X-Membership-ID.
type XMembershipID = string

// XUserID defines model for X-User-ID.
type XUserID = string

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	Count int64 `form:"count" json:"count"`
	Page  int64 `form:"page" json:"page"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Code string `json:"code"`
}

// ProfileParams defines parameters for Profile.
type ProfileParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	Code string `json:"code"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Count       int64   `form:"count" json:"count"`
	Page        int64   `form:"page" json:"page"`
	CharacterId string  `form:"characterId" json:"characterId"`
	XUserID     XUserID `json:"X-User-ID"`
}

// CreateSnapshotJSONBody defines parameters for CreateSnapshot.
type CreateSnapshotJSONBody struct {
	CharacterId string `json:"characterId"`
}

// CreateSnapshotParams defines parameters for CreateSnapshot.
type CreateSnapshotParams struct {
	XUserID       XUserID       `json:"X-User-ID"`
	XMembershipID XMembershipID `json:"X-Membership-ID"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody CreateSnapshotJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /activities)
	GetActivities(c *gin.Context, params GetActivitiesParams)

	// (GET /activities/{activityId})
	GetActivity(c *gin.Context, activityId string)

	// (POST /login)
	Login(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (GET /profile)
	Profile(c *gin.Context, params ProfileParams)

	// (POST /refresh)
	RefreshToken(c *gin.Context)

	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)

	// (POST /snapshots)
	CreateSnapshot(c *gin.Context, params CreateSnapshotParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivities(c, params)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "activityId" -------------
	var activityId string

	err = runtime.BindStyledParameterWithOptions("simple", "activityId", c.Param("activityId"), &activityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter activityId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivity(c, activityId)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// Profile operation middleware
func (siw *ServerInterfaceWrapper) Profile(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Profile(c, params)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "count" -------------

	if paramValue := c.Query("count"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument count is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "characterId" -------------

	if paramValue := c.Query("characterId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument characterId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "characterId", c.Request.URL.Query(), &params.CharacterId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter characterId: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSnapshotParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-ID")]; found {
		var XUserID XUserID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-User-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-ID", valueList[0], &XUserID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-User-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserID = XUserID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-User-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Membership-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Membership-ID")]; found {
		var XMembershipID XMembershipID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Membership-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Membership-ID", valueList[0], &XMembershipID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Membership-ID: %w", err), http.StatusBadRequest)
			return
		}

		params.XMembershipID = XMembershipID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Membership-ID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/activities", wrapper.GetActivities)
	router.GET(options.BaseURL+"/activities/:activityId", wrapper.GetActivity)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.GET(options.BaseURL+"/profile", wrapper.Profile)
	router.POST(options.BaseURL+"/refresh", wrapper.RefreshToken)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.POST(options.BaseURL+"/snapshots", wrapper.CreateSnapshot)
}

type GetActivitiesRequestObject struct {
	Params GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse []ActivityHistory

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivityRequestObject struct {
	ActivityId string `json:"activityId"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse struct {
	Activity ActivityHistory `json:"activity"`
	Stats    []WeaponStats   `json:"stats"`
}

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse AuthResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(w http.ResponseWriter) error
}

type GetPing200JSONResponse Pong

func (response GetPing200JSONResponse) VisitGetPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileRequestObject struct {
	Params ProfileParams
}

type ProfileResponseObject interface {
	VisitProfileResponse(w http.ResponseWriter) error
}

type Profile200JSONResponse Profile

func (response Profile200JSONResponse) VisitProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse AuthResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200JSONResponse []CharacterSnapshot

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSnapshotRequestObject struct {
	Params CreateSnapshotParams
	Body   *CreateSnapshotJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201JSONResponse CharacterSnapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)

	// (GET /activities/{activityId})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)

	// (GET /profile)
	Profile(ctx context.Context, request ProfileRequestObject) (ProfileResponseObject, error)

	// (POST /refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)

	// (POST /snapshots)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(ctx *gin.Context, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(ctx *gin.Context, activityId string) {
	var request GetActivityRequestObject

	request.ActivityId = activityId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx *gin.Context) {
	var request GetPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx, request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Profile operation middleware
func (sh *strictHandler) Profile(ctx *gin.Context, params ProfileParams) {
	var request ProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Profile(ctx, request.(ProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Profile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProfileResponseObject); ok {
		if err := validResponse.VisitProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context, params CreateSnapshotParams) {
	var request CreateSnapshotRequestObject

	request.Params = params

	var body CreateSnapshotJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
